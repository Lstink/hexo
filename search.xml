<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试复习</title>
      <link href="/2021/06/28/mian-shi-ti/"/>
      <url>/2021/06/28/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h2><h3 id="初始化git-进入项目所在文件夹"><a href="#初始化git-进入项目所在文件夹" class="headerlink" title="初始化git: 进入项目所在文件夹"></a>初始化git: 进入项目所在文件夹</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init </code></pre><p>这个命令会产生一个隐藏文件夹： .git </p><p>查看隐藏文件/文件夹</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -a</code></pre><h3 id="git是什么？"><a href="#git是什么？" class="headerlink" title=".git是什么？"></a>.git是什么？</h3><p>​    本地存储的git仓库/本地git仓库</p><h3 id="怎么去提交代码？"><a href="#怎么去提交代码？" class="headerlink" title="怎么去提交代码？"></a>怎么去提交代码？</h3><p>添加所有的文件到缓冲区（.git）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span></code></pre><h3 id="怎么去保存代码？"><a href="#怎么去保存代码？" class="headerlink" title="怎么去保存代码？"></a>怎么去保存代码？</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'备注内容'</span></code></pre><p>现在代码已经提交到本地仓库了，但是并没有推送到远程仓库。</p><h3 id="怎么去把代码提交到线上仓库（远程仓库）？"><a href="#怎么去把代码提交到线上仓库（远程仓库）？" class="headerlink" title="怎么去把代码提交到线上仓库（远程仓库）？"></a>怎么去把代码提交到线上仓库（远程仓库）？</h3><h4 id="关联远程仓库（这个步骤是在你没有关联过远程仓库的情况下，如果你的项目是git-clone下来的，那么就不需要你去手动关联）"><a href="#关联远程仓库（这个步骤是在你没有关联过远程仓库的情况下，如果你的项目是git-clone下来的，那么就不需要你去手动关联）" class="headerlink" title="关联远程仓库（这个步骤是在你没有关联过远程仓库的情况下，如果你的项目是git clone下来的，那么就不需要你去手动关联）"></a>关联远程仓库（这个步骤是在你没有关联过远程仓库的情况下，如果你的项目是git clone下来的，那么就不需要你去手动关联）</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://gitee.com/Lstink/sql_test.git </code></pre><p>提交代码（把本地仓库的代码提交到远程仓库，必须把本地的代码保存到本地仓库）</p><h4 id="第一次提交（远程仓库没有任何代码-仓库的第一次提交）"><a href="#第一次提交（远程仓库没有任何代码-仓库的第一次提交）" class="headerlink" title="第一次提交（远程仓库没有任何代码/仓库的第一次提交）"></a>第一次提交（远程仓库没有任何代码/仓库的第一次提交）</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master</code></pre><h4 id="正常提交，记得每次提交代码之前最好先-git-pull"><a href="#正常提交，记得每次提交代码之前最好先-git-pull" class="headerlink" title="正常提交，记得每次提交代码之前最好先 git pull"></a>正常提交，记得每次提交代码之前最好先 <code>git pull</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push </code></pre><h3 id="查看当前git修改状态"><a href="#查看当前git修改状态" class="headerlink" title="查看当前git修改状态"></a>查看当前git修改状态</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status</code></pre><h3 id="查看某个文件和上一次提交修改了哪些内容"><a href="#查看某个文件和上一次提交修改了哪些内容" class="headerlink" title="查看某个文件和上一次提交修改了哪些内容"></a>查看某个文件和上一次提交修改了哪些内容</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> zs.php</code></pre><h2 id="当给你一个git项目地址，你该怎么做？"><a href="#当给你一个git项目地址，你该怎么做？" class="headerlink" title="当给你一个git项目地址，你该怎么做？"></a>当给你一个git项目地址，你该怎么做？</h2><pre class=" language-bash"><code class="language-bash">https://gitee.com/Lstink/take-out.git</code></pre><h3 id="1-克隆下来这个项目"><a href="#1-克隆下来这个项目" class="headerlink" title="1.克隆下来这个项目"></a>1.克隆下来这个项目</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/Lstink/take-out.git</code></pre><h3 id="2-查看-gitignore文件"><a href="#2-查看-gitignore文件" class="headerlink" title="2.查看.gitignore文件"></a>2.查看<code>.gitignore</code>文件</h3><p>​    确认有哪些必要文件没有上传到远程仓库，手动去配置或者下载这些文件</p><blockquote><p>注意：</p><p>.gitignore 这个文件内所写的内容是排除提交的，就是忽略掉这个文件内写的目录或者文件。</p><p>比如经常写的,这是排除phpstorm编辑器和vscode编辑器自己产生的配置文件</p><p>/.idea</p><p>/.vscode</p></blockquote><h4 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><h4 id="回退到上一次提交的版本"><a href="#回退到上一次提交的版本" class="headerlink" title="回退到上一次提交的版本"></a>回退到上一次提交的版本</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard HEAD^ / <span class="token function">git</span> reset --hard HEAD~2</code></pre><h3 id="3-创建分支"><a href="#3-创建分支" class="headerlink" title="3.创建分支"></a>3.创建分支</h3><h4 id="创建test分支"><a href="#创建test分支" class="headerlink" title="创建test分支"></a>创建test分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token function">test</span> </code></pre><h4 id="创建分支并切换到该分支"><a href="#创建分支并切换到该分支" class="headerlink" title="创建分支并切换到该分支"></a>创建分支并切换到该分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b <span class="token function">test</span></code></pre><h3 id="4-切换分支"><a href="#4-切换分支" class="headerlink" title="4.切换分支"></a>4.切换分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token function">test</span></code></pre><h3 id="5-合并分支"><a href="#5-合并分支" class="headerlink" title="5.合并分支"></a>5.合并分支</h3><h4 id="合并到哪个分支上就切换到哪个分支上"><a href="#合并到哪个分支上就切换到哪个分支上" class="headerlink" title="合并到哪个分支上就切换到哪个分支上"></a>合并到哪个分支上就切换到哪个分支上</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> merge <span class="token function">test</span></code></pre><h3 id="6-拉取代码"><a href="#6-拉取代码" class="headerlink" title="6.拉取代码"></a>6.拉取代码</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull</code></pre><h2 id="js-（Jquery-javascript）"><a href="#js-（Jquery-javascript）" class="headerlink" title="js （Jquery/javascript）"></a>js （Jquery/javascript）</h2><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1.选择器"></a>1.选择器</h3><h4 id="‘-class’"><a href="#‘-class’" class="headerlink" title="$(‘.class’)"></a>$(‘.class’)</h4><h3 id="2-事件"><a href="#2-事件" class="headerlink" title="2.事件"></a>2.事件</h3><h3 id="3-DOM操作"><a href="#3-DOM操作" class="headerlink" title="3.DOM操作"></a>3.DOM操作</h3><h3 id="4-ajax同步异步问题"><a href="#4-ajax同步异步问题" class="headerlink" title="4.ajax同步异步问题"></a>4.ajax同步异步问题</h3><h2 id="Vue-Vue-js-前端的一个js框架，微信小程序开发必会，前端框架"><a href="#Vue-Vue-js-前端的一个js框架，微信小程序开发必会，前端框架" class="headerlink" title="Vue (Vue.js)前端的一个js框架，微信小程序开发必会，前端框架"></a>Vue (Vue.js)前端的一个js框架，微信小程序开发必会，前端框架</h2><h2 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h2><p>​    docker相当于是一个Linux系统上的虚拟机，分三个内容：</p><ol><li><p>镜像 </p></li><li><p>仓库</p></li><li><p>容器</p><table><thead><tr><th align="center">名称</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">下载一个镜像</td><td align="center">docekr pull ubuntu:19.04</td></tr><tr><td align="center">远程仓库</td><td align="center">docker login</td></tr><tr><td align="center">容器</td><td align="center">容器里存放镜像</td></tr></tbody></table><h3 id="下载一个镜像-最新"><a href="#下载一个镜像-最新" class="headerlink" title="下载一个镜像(最新)"></a>下载一个镜像(最新)</h3><pre class=" language-bash"><code class="language-bash">docker pull centos</code></pre><h3 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><pre class=" language-bash"><code class="language-bash">docker run -it -d --name zs -p 127.0.0.1:80:80 ubuntu /bin/bash </code></pre><ul><li>–name 声明容器的名称</li><li>-d 后台运行这个容器</li><li>-p 端口映射:容器内部端口绑定到<strong>指定</strong>的主机端口。左边是主机端口，右边是容器端口</li></ul><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><h4 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> </code></pre><h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a</code></pre><h3 id="启动一个容器-1"><a href="#启动一个容器-1" class="headerlink" title="启动一个容器"></a>启动一个容器</h3><pre class=" language-bash"><code class="language-bash">docker start dfghfgsgsfgs/zs</code></pre><h3 id="停止一个容器"><a href="#停止一个容器" class="headerlink" title="停止一个容器"></a>停止一个容器</h3><pre class=" language-bash"><code class="language-bash">docker stop dfgdfgsgddd/zs</code></pre><h3 id="重启一个容器"><a href="#重启一个容器" class="headerlink" title="重启一个容器"></a>重启一个容器</h3><pre class=" language-bash"><code class="language-bash">docker restart dghgagdhjf/zs</code></pre><h3 id="进入一个容器"><a href="#进入一个容器" class="headerlink" title="进入一个容器"></a>进入一个容器</h3><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it ghdfssdgfsas/zs /bin/bash</code></pre><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span></code></pre><h3 id="删除一个容器"><a href="#删除一个容器" class="headerlink" title="删除一个容器"></a>删除一个容器</h3><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> -f dsfdsfsfs/zs</code></pre><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre class=" language-bash"><code class="language-bash">docker rmi ubuntu</code></pre><h3 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h3><h4 id="创建docker网络"><a href="#创建docker网络" class="headerlink" title="创建docker网络"></a>创建docker网络</h4><pre class=" language-bash"><code class="language-bash">docker network create -d bridge test-net</code></pre><p><a href="https://www.runoob.com/docker/docker-container-connection.html" target="_blank" rel="noopener">菜鸟教程</a></p></li></ol><h2 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h2><h3 id="swoole是什么？"><a href="#swoole是什么？" class="headerlink" title="swoole是什么？"></a><a href="http://wiki.swoole.com/" target="_blank" rel="noopener">swoole</a>是什么？</h3><p>也是一个框架，可以用来做多进程，websocket长连接</p><h2 id="Mysql问题"><a href="#Mysql问题" class="headerlink" title="Mysql问题"></a>Mysql问题</h2><h3 id="主从复制-2个以上"><a href="#主从复制-2个以上" class="headerlink" title="主从复制 2个以上"></a>主从复制 2个以上</h3><ol><li><p>原理</p>{% asset_img 2636642-3c9ab857ff759feb.png 原理图 %}<ul><li>主库的更新操作都会记录二进制日志（binary log）</li><li>从库开启IO线程，读取主库的二进制日志；写入从库的中继日志(relay log)；</li><li>从库开启SQL线程，将中继日志内容写入从库数据库，实现与主库的一致；</li></ul></li><li><p>配置实现</p><ul><li>修改两个数据库的配置文件 my.cnf</li><li>添加server-id=1，server-id=2 ，server-id不能相同</li><li>主库配置一个账号专门让从库通过这个账号读取数据，进行同步</li></ul></li><li><p>主从同步延时问题怎么产生的？</p><ul><li>主库写二进制日志的时候，它是多进程写的</li><li>从库同步主库内容的时候，它是单进程写的</li></ul></li><li><p>为什么从库不能多进程去写？</p></li><li><p>怎么解决主从延时问题？</p><ul><li>msyql中间件</li></ul></li></ol><h3 id="配置主从复制的目的是什么？"><a href="#配置主从复制的目的是什么？" class="headerlink" title="配置主从复制的目的是什么？"></a>配置主从复制的目的是什么？</h3><ol><li>保留一份备份</li><li>配置读写分离<ul><li>主库进行更新操作</li><li>从库进行查询操作</li></ul></li></ol><h3 id="分区分表"><a href="#分区分表" class="headerlink" title="分区分表"></a>分区分表</h3><ul><li><p>分表</p><p>取余  余数是几就存入第几张表</p><p>hash 哈希  取哈希值的第一位,0123456789abcdef 分16张表。</p></li></ul><h2 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h2><h3 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h3><ol><li>登录状态下<ul><li>直接加入购物车</li></ul></li><li>未登录状态下存cookie<ul><li>cookie中存的是json格式的数据</li><li>用base64_encode加密</li><li>存商品id,加入时间，商品的数量</li></ul></li><li>登录时同步cookie内容到购物车<ul><li>判断数据库中是否存在该商品，如果存在则把cookie中商品数量加上数据库中商品的数量</li><li>不存在则直接存入数据库</li></ul></li></ol><h3 id="商城秒杀的实现？"><a href="#商城秒杀的实现？" class="headerlink" title="商城秒杀的实现？"></a>商城秒杀的实现？</h3><p>答:抢购、秒杀是如今很常见的一个应用场景，主要需要解决的问题有两个：<br>1 高并发对数据库产生的压力<br>2 竞争状态下如何解决库存的正确减少（”超卖”问题）<br>对于第一个问题，已经很容易想到用缓存来处理抢购，避免直接操作数据库，例如使用Redis。第二个问题，我们可以使用redis队列来完成，把要秒杀的商品放入到队列中，因为pop操作是原子的，即使有很多用户同时到达，也是依次执行，文件锁和事务在高并发下性能下降很快，当然还要考虑其他方面的东西，比如抢购页面做成静态的，通过ajax调用接口，其中也可能会出现一个用户抢多次的情况，这时候需要再加上一个排队队列和抢购结果队列及库存队列。高并发情况下，将用户进入排队队列，用一个线程循环处理从排队队列取出一个用户，判断用户是否已在抢购结果队列，如果在，则已抢购，否则未抢购，库存减1，写数据库，将用户入结果队列。</p><h2 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h2><h3 id="接口验签"><a href="#接口验签" class="headerlink" title="接口验签"></a>接口验签</h3><ul><li>随机数</li><li>时间戳</li><li>key值</li></ul><h3 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'dsdfsfgs'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双方约定的key值</span><span class="token variable">$tmpArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$timestamp</span><span class="token punctuation">,</span> <span class="token variable">$nonce</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将key,时间戳，随机数放到一个数组中</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$tmpArr</span><span class="token punctuation">,</span> <span class="token constant">SORT_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对这个数组进行字典排序</span><span class="token variable">$tmpStr</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span> <span class="token variable">$tmpArr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将数组拼接成字符串</span><span class="token variable">$signature</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span> <span class="token variable">$tmpStr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sha1进行加密，加密结果就是signature</span></code></pre><h3 id="验证签名"><a href="#验证签名" class="headerlink" title="验证签名"></a>验证签名</h3><p>客户端发送过来的数据必须通过同样的方式生成签名，并且把 <strong><em>随机数</em></strong> ，<strong><em>时间戳</em></strong> 和 <strong><em>signature</em></strong> 发送过来，同时携带上请求的数据，我们按照同样的方式生成签名，对比签名是否一致。</p><h3 id="接口加密"><a href="#接口加密" class="headerlink" title="接口加密"></a>接口加密</h3><p>将请求的数据和 <strong><em>随机数</em></strong> ， <strong><em>时间戳</em></strong> 进行某种方式的加密，得到密文，把密文和 <strong><em>signature</em></strong> 发送给请求的接口，这时候，接口进行解密，得到数据，生成签名，对比签名是否一致。</p><h3 id="restful风格的接口"><a href="#restful风格的接口" class="headerlink" title="restful风格的接口"></a>restful风格的接口</h3><p>laravel中又叫资源路由 (resource)</p><table><thead><tr><th>请求的方法</th><th>说明</th></tr></thead><tbody><tr><td>get</td><td>获取数据</td></tr><tr><td>post</td><td>添加数据</td></tr><tr><td>put</td><td>修改数据（修改数据的全部信息）</td></tr><tr><td>patch</td><td>修改数据（修改数据的某几个字段）</td></tr><tr><td>delete</td><td>删除数据</td></tr><tr><td>head</td><td>获取资源的元数据(不常用)</td></tr><tr><td>options</td><td>获取信息，关于资源的哪些属性是客户端可以改变的。（不常用）</td></tr></tbody></table><h2 id="Redis的使用"><a href="#Redis的使用" class="headerlink" title="Redis的使用"></a>Redis的使用</h2><h3 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h3><ol><li>字符串</li><li>hash</li><li>集合：集合的数据是唯一的，不能出现重复的数据</li><li>有序集合: 有序集合的成员是唯一的,但分数(score)却可以重复,可以进行排名或者比较大小</li><li>队列</li></ol><table><thead><tr><th>类型</th><th>存</th><th>取</th></tr></thead><tbody><tr><td>字符串</td><td>SET key</td><td>GET key</td></tr><tr><td>HASH</td><td>HSET key field value (HMSET key field value field value …)</td><td>HGET key filed (HGETALL key)</td></tr><tr><td>集合</td><td>SADD key member1 member2(成员)…</td><td>SMEMBERS key</td></tr><tr><td>有序集合</td><td>ZADD key score1 member1 score2 member2 …</td><td>ZRANGE key 0 -1（获取这个key的所有值）</td></tr><tr><td>队列</td><td>LPUSH key value / RPUSH key value</td><td>LPOP key / RPOP key</td></tr></tbody></table><h2 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2><ol><li>数据表设计上，合理使用字段类型</li><li>经常查询的字段建立合适的索引</li><li>查询语句尽量简短，需要什么字段查询什么字段，避免使用select *</li><li>尽量少在sql语句中使用除聚合函数外的其它函数，能用php处理的就在php上处理</li><li>查询语句尽量用到覆盖索引</li><li>mysql读写分离，主从复制，分区分表</li><li>数据库的字段如果没有值，不要自动填充NULL</li><li>避免使用 %前缀的模糊查询 </li></ol><h3 id="词语解释"><a href="#词语解释" class="headerlink" title="词语解释"></a>词语解释</h3><ul><li><p>char和varchar的区别：</p><p>char是固定长度，varchar可变长度，速度上char比varchar更快</p></li><li><p>索引的类型有哪些？</p><ol><li><p>普通索引：加快查询速度</p></li><li><p>唯一索引：加快查询速度，并且值唯一，不能重复</p></li><li><p>主键索引：该索引在一张表中只能有一个，并且值不能重复</p></li><li><p>复合索引：多个字段共同建立的索引</p><p>复合索引的最左原则?</p><p>a b c    a=1 and b=2 and c=4</p><p>数据库的所有查询语句都会被mysql的查询优化器先处理， b a c =&gt; a b c </p></li></ol></li><li><p>聚合函数是什么？</p><p>count() 求数量</p><p>avg()</p><p>max()</p><p>min()</p><p>sum()</p><p>使用聚合函数查询速度很快，基本上不会占用很多资源</p></li><li><p>覆盖索引？</p><p>覆盖索引就是你查询的数据在索引中就能直接找到，覆盖索引不是索引，只是一种叫法。</p></li></ul><h3 id="什么是分区？"><a href="#什么是分区？" class="headerlink" title="什么是分区？"></a>什么是分区？</h3><p>分区和分表相似，都是按照规则分解表。不同在于分表将大表分解为若干个独立的实体表，而分区是将数据分段划分在多个位置存放，分区后，表还是一张表，但数据散列到多个位置了。app读写的时候操作的还是表名字，db自动去组织分区的数据。</p><h3 id="什么是分表？"><a href="#什么是分表？" class="headerlink" title="什么是分表？"></a>什么是分表？</h3><p>分表是将一个大表按照一定的规则分解成多张具有独立存储空间的实体表，每个表都对应三个文件，MYD数据文件，.MYI索引文件，.frm表结构文件。这些表可以分布在同一块磁盘上，也可以在不同的机器上。app读写的时候根据事先定义好的规则得到对应的表名，然后去操作它。</p><p>将单个数据库表进行拆分，拆分成多个数据表，然后用户访问的时候，根据一定的算法（如用hash的方式，也可以用求余（取模）的方式），让用户访问不同的表，这样数据分散到多个数据表中，减少了单个数据表的访问压力。提升了数据库访问性能。分表的目的就在于此，减小数据库的负担，缩短查询时间。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="linux是什么？"><a href="#linux是什么？" class="headerlink" title="linux是什么？"></a>linux是什么？</h3><p>linux是一个系统。</p><p>系统有很多，比如家庭常用的windows系统，windows系统又分为很多个版本，有windows7 8 10 .</p><p>同样的，linux也是。</p><h3 id="linux有哪些常用版本？"><a href="#linux有哪些常用版本？" class="headerlink" title="linux有哪些常用版本？"></a>linux有哪些常用版本？</h3><p>centos ubuntu debian …</p><p>centos稳定，但是内核更新慢，软件更新慢，包管理工具 yum </p><p>ubuntu更大众，软件更新快。包管理工具 apt/apt-get</p><p>debian更稳定。包管理工具 apt/apt-get</p><p>安装 <code>git yum install -y git</code></p><p>安装 <code>wget yum install -y wget</code></p><h3 id="你在linux中常用的命令是哪些？"><a href="#你在linux中常用的命令是哪些？" class="headerlink" title="你在linux中常用的命令是哪些？"></a>你在linux中常用的命令是哪些？</h3><p>ls cat cd mv cp touch vi vim chmod chown </p><p>查看端口 <code>netstat -tlunp</code></p><p>查询进程 <code>ps -ef</code>  或者 <code>ps aux</code></p><p>查看内存 <code>free -m</code></p><p>查看cpu运行 <code>top</code></p><h3 id="Linux的权限问题？"><a href="#Linux的权限问题？" class="headerlink" title="Linux的权限问题？"></a>Linux的权限问题？</h3><p>drwxr-xr-x 是什么意思？</p><p><code>d rwx r-x r-x</code>  755</p><p>d 或者 - </p><p>d指的是dir，目录</p><p>-指的是文件 </p><table><thead><tr><th>名称</th><th>解释</th><th>权限</th></tr></thead><tbody><tr><td>w</td><td>(read)读</td><td>4</td></tr><tr><td>w</td><td>(write)写</td><td>2</td></tr><tr><td>x</td><td>(exec)执行</td><td>1</td></tr></tbody></table><p>第一组指的是文件所有者的权限</p><p>第二组指的是所有者用户所属组的权限</p><p>第三组指的是其它用户的权限</p><h2 id="php优化"><a href="#php优化" class="headerlink" title="php优化"></a>php优化</h2><p>1、将类的方法定义为static。<br>2、尽量使用单引号。<br>3、修改php－fpm进程数。<br>4、修改单个脚本最大可使用内存。<br>5、大的数组使用完之后要及时释放。<br>6、循环的时候，制定最大循环次数<br>7、不使用@屏蔽错误<br>8、尽量采用大量的 PHP 内置函数<br>9、使用require代替require_once</p><h2 id="nginx优化"><a href="#nginx优化" class="headerlink" title="nginx优化"></a>nginx优化</h2><p>1、修改nginx的子进程数。 ［ 最多65535，不是越多越好 ］<br>2、开启静态缓存<br>3、修改主进程数。建议按照cpu 数目来指定，一般为它的倍数 (如,2个四核的cpu计为8)<br>4、开启gzip输出   ［ 开启gzip，ob函数就不能用了 ］<br>5、keepalive_timeout 设置连接超时时间</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql储存过程和函数</title>
      <link href="/2021/04/01/mysql-chu-cun-guo-cheng-he-han-shu/"/>
      <url>/2021/04/01/mysql-chu-cun-guo-cheng-he-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql存储过程和函数学习"><a href="#Mysql存储过程和函数学习" class="headerlink" title="Mysql存储过程和函数学习"></a>Mysql存储过程和函数学习</h1><h2 id="一-定义名称"><a href="#一-定义名称" class="headerlink" title="一. 定义名称"></a>一. 定义名称</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建存储过程--接受一个整型的输入值</span>create procedure name<span class="token punctuation">(</span>in param int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建函数</span>create <span class="token keyword">function</span> name</code></pre><h2 id="二-输入输出"><a href="#二-输入输出" class="headerlink" title="二. 输入输出"></a>二. 输入输出</h2><p><code>IN</code> , <code>OUT</code> , <code>INOUTT</code></p><blockquote><p><code>in</code> 输入</p><p><code>out</code> 输出</p><p><code>inout</code> 输入输出</p></blockquote><h2 id="三-声明结束符的定义"><a href="#三-声明结束符的定义" class="headerlink" title="三. 声明结束符的定义"></a>三. 声明结束符的定义</h2><pre class=" language-bash"><code class="language-bash">delimitetr $$或delimiter //</code></pre><h2 id="四-变量的定义"><a href="#四-变量的定义" class="headerlink" title="四. 变量的定义"></a>四. 变量的定义</h2><p><code>declare</code> 开头，后面是变量名称，然后跟类型约束 </p><pre><code>declare name int unsigned default 100;</code></pre><h2 id="五-示例"><a href="#五-示例" class="headerlink" title="五. 示例"></a>五. 示例</h2><pre><code># 创建存储过程CREATE PROCEDURE test(IN a INT)# 开始使用 BEGINBEGIN    SELECT * FROM USER;# 结束使用 ENDEND</code></pre><h2 id="六-调用"><a href="#六-调用" class="headerlink" title="六. 调用"></a>六. 调用</h2><pre><code>call test(1)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装svn服务</title>
      <link href="/2021/03/31/centos-an-zhuang-svn-fu-wu/"/>
      <url>/2021/03/31/centos-an-zhuang-svn-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="centos安装svn服务并配置"><a href="#centos安装svn服务并配置" class="headerlink" title="centos安装svn服务并配置"></a>centos安装svn服务并配置</h2><p>记录一次centos安装svn服务并配置用户和命令。</p><h3 id="一-安装svn服务"><a href="#一-安装svn服务" class="headerlink" title="一. 安装svn服务"></a>一. 安装svn服务</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 更新yum源</span>yum update<span class="token comment" spellcheck="true"># 安装svn服务</span>yum <span class="token function">install</span> subversion</code></pre><p>安装成功之后，创建项目版本库。</p><h2 id="二-创建项目版本库"><a href="#二-创建项目版本库" class="headerlink" title="二. 创建项目版本库"></a>二. 创建项目版本库</h2><pre><code># svnadmin create [路径]svnadmin create /data/svndata/project</code></pre><p>创建之后，把以下文件上传到<code>/data/svndata/</code></p><p><code>authz</code> 用户权限文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>aliases<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</span><span class="token punctuation">[</span>groups<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># harry_and_sally = harry,sally</span><span class="token comment" spellcheck="true"># harry_sally_and_joe = harry,sally,&amp;joe</span><span class="token comment" spellcheck="true"># [/foo/bar]</span><span class="token comment" spellcheck="true"># harry = rw</span><span class="token comment" spellcheck="true"># &amp;joe = r</span><span class="token comment" spellcheck="true"># * =</span><span class="token comment" spellcheck="true"># [repository:/baz/fuz]</span><span class="token comment" spellcheck="true"># @harry_and_sally = rw</span><span class="token comment" spellcheck="true"># * = r</span><span class="token punctuation">[</span>/<span class="token punctuation">]</span><span class="token function">test</span> <span class="token operator">=</span> rw</code></pre><p><code>passwd</code> 用户以及密码文件</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>users<span class="token punctuation">]</span><span class="token function">test</span> <span class="token operator">=</span> <span class="token function">test</span></code></pre><h2 id="三-上传脚本文件"><a href="#三-上传脚本文件" class="headerlink" title="三. 上传脚本文件"></a>三. 上传脚本文件</h2><p>用脚本文件控制svn服务，提高效率</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#author: lstink</span><span class="token comment" spellcheck="true">#time: 2020-10-3</span><span class="token comment" spellcheck="true">#desc: svn脚本控制</span>RED<span class="token operator">=</span>31GREEN<span class="token operator">=</span>32BLUE<span class="token operator">=</span>44<span class="token comment" spellcheck="true">#svn的版本库目录</span>SVN_PATH<span class="token operator">=</span>/data/svndata/<span class="token comment" spellcheck="true">#公网ip地址,更换为你自己的公网ip地址</span>IP<span class="token operator">=</span>127.0.0.1<span class="token comment" spellcheck="true">#端口</span>PORT<span class="token operator">=</span>3690<span class="token comment" spellcheck="true">#用户起始行</span>USERLINE<span class="token operator">=</span>2<span class="token comment" spellcheck="true">#颜色</span><span class="token keyword">function</span> colorAdd <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[1;<span class="token variable">$1m</span><span class="token variable">$2</span>\033[0m"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#创建版本库的方法</span><span class="token keyword">function</span> createProject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$UID</span> -ne 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">'请使用root账号登录'</span>        <span class="token keyword">exit</span>    <span class="token keyword">fi</span>    <span class="token function">read</span> -p <span class="token string">'请输入项目名称: '</span> project    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$project</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入项目名称: '</span> project    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true">#检查版本库名称是否重复</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d <span class="token variable">$SVN_PATH</span><span class="token variable">$project</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">"名称为 <span class="token variable">$project</span> 的版本库已存在，请换一个名称！"</span>        createProject    <span class="token keyword">fi</span>    <span class="token comment" spellcheck="true">#创建项目版本库</span>    svnadmin create <span class="token variable">$SVN_PATH</span><span class="token variable">$project</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token comment" spellcheck="true">#修改配置</span>        <span class="token function">cat</span> <span class="token operator">></span> <span class="token variable">$SVN_PATH</span><span class="token variable">${project}</span>/conf/svnserve.conf <span class="token operator">&lt;&lt;</span>-EOF            <span class="token punctuation">[</span>general<span class="token punctuation">]</span>            anon-access <span class="token operator">=</span> none            auth-access <span class="token operator">=</span> <span class="token function">write</span>            password-db <span class="token operator">=</span> /data/svndata/passwd            authz-db <span class="token operator">=</span> /data/svndata/authz        EOF        <span class="token keyword">echo</span> <span class="token string">"realm = <span class="token variable">$project</span>"</span> <span class="token operator">>></span> <span class="token variable">$SVN_PATH</span><span class="token variable">${project}</span>/conf/svnserve.conf<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            colorAdd <span class="token string">"<span class="token variable">$GREEN</span>"</span> <span class="token string">'自动创建项目版本库成功!'</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'版本库地址为：'</span>            colorAdd <span class="token string">"<span class="token variable">$BLUE</span>"</span> <span class="token string">"svn://<span class="token variable">$IP</span>:<span class="token variable">$PORT</span>/<span class="token variable">$project</span>"</span><span class="token punctuation">;</span>        <span class="token keyword">fi</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">#创建失败</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">'版本库创建失败，请确认是否安装svn？'</span>    <span class="token keyword">fi</span>    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#删除版本库的方法</span><span class="token keyword">function</span> deleteProject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">read</span> -p <span class="token string">'请输入要删除的版本库名称: '</span> project    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$project</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入要删除的版本库名称: '</span> project    <span class="token keyword">done</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$SVN_PATH</span><span class="token variable">$project</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">"<span class="token variable">${project}</span>版本库不存在，请检查确认"</span>        deleteProject    <span class="token keyword">fi</span>    <span class="token function">read</span> -p <span class="token string">"确认删除 <span class="token variable">$project</span> 版本库吗？(y/n): "</span> confirm    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$confirm</span>"</span> <span class="token keyword">in</span>        y<span class="token operator">|</span>Y <span class="token punctuation">)</span>         <span class="token function">rm</span> -rf <span class="token variable">$SVN_PATH</span><span class="token variable">$project</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            colorAdd <span class="token string">"<span class="token variable">$GREEN</span>"</span> <span class="token string">'版本库删除成功!'</span>        <span class="token keyword">fi</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        * <span class="token punctuation">)</span>        deleteProject <span class="token punctuation">;</span><span class="token punctuation">;</span>    esac    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#添加用户的方法</span><span class="token keyword">function</span> createUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">read</span> -p <span class="token string">'请输入用户名: '</span> user    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$user</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入用户名: '</span> user    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true">#检查用户是否重复</span>    <span class="token function">grep</span> <span class="token string">"<span class="token variable">$user</span> = "</span> <span class="token string">"<span class="token variable">${SVN_PATH}</span>passwd"</span> <span class="token operator">&amp;</span><span class="token operator">>></span> /etc/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">"用户 <span class="token variable">$user</span> 已存在，请检查！"</span>        createUser    <span class="token keyword">fi</span>    <span class="token function">read</span> -p <span class="token string">'请输入密码: '</span> password    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$password</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入密码: '</span> password    <span class="token keyword">done</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$user</span> = <span class="token variable">$password</span>"</span> <span class="token operator">>></span> <span class="token variable">${SVN_PATH}</span><span class="token function">passwd</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$GREEN</span>"</span> <span class="token string">'用户添加成功！'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#添加读写权限</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$user</span> = rw"</span> <span class="token operator">>></span> <span class="token variable">${SVN_PATH}</span>authz<span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'请牢记账号密码：'</span>        colorAdd <span class="token string">"<span class="token variable">$BLUE</span>"</span> <span class="token string">"账号：<span class="token variable">$user</span>"</span>        colorAdd <span class="token string">"<span class="token variable">$BLUE</span>"</span> <span class="token string">"密码：<span class="token variable">$password</span>"</span>    <span class="token keyword">fi</span>    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#删除用户</span><span class="token keyword">function</span> deleteUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">read</span> -p <span class="token string">'请输入将要删除的用户名: '</span> user    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$user</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入将要删除的用户名: '</span> user    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true">#检查用户</span>    <span class="token function">grep</span> <span class="token string">"<span class="token variable">$user</span> = "</span> <span class="token string">"<span class="token variable">${SVN_PATH}</span>passwd"</span> <span class="token operator">&amp;</span><span class="token operator">>></span> /etc/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">"用户 <span class="token variable">$user</span> 不存在，请检查！"</span>        deleteUser    <span class="token keyword">fi</span>    <span class="token function">read</span> -p <span class="token string">"确认删除用户 <span class="token variable">$user</span> 吗？(y/n): "</span> confirm    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$confirm</span>"</span> <span class="token keyword">in</span>        y<span class="token operator">|</span>Y <span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#删除用户以及对应的权限</span>        deleteAuth <span class="token variable">$user</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        * <span class="token punctuation">)</span>        deleteUser <span class="token punctuation">;</span><span class="token punctuation">;</span>    esac    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#查看所有用户</span><span class="token keyword">function</span> allUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sed</span> -n <span class="token string">"<span class="token variable">$USERLINE</span>,$"</span>p <span class="token variable">${SVN_PATH}</span><span class="token function">passwd</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>    <span class="token keyword">echo</span> <span class="token string">''</span>    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#查看所有项目</span><span class="token keyword">function</span> allProject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">find</span> <span class="token string">"<span class="token variable">$SVN_PATH</span>"</span> -type d <span class="token operator">|</span> <span class="token function">awk</span> -F/ <span class="token string">'{print <span class="token variable">$4</span>}'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{if(NF>0) print <span class="token variable">$0</span>}'</span>    <span class="token keyword">echo</span> <span class="token string">''</span>    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#重置用户密码</span><span class="token keyword">function</span> changeUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">read</span> -p <span class="token string">'请输入用户名: '</span> user    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$user</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入用户名: '</span> user    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true">#判断该用户是否存在</span>    <span class="token function">grep</span> <span class="token string">"<span class="token variable">$user</span> = "</span> <span class="token string">"<span class="token variable">${SVN_PATH}</span>passwd"</span> <span class="token operator">&amp;</span><span class="token operator">>></span> /etc/null    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$RED</span>"</span> <span class="token string">"用户 <span class="token variable">$user</span> 不存在，请检查！"</span>        changeUser    <span class="token keyword">fi</span>    <span class="token function">read</span> -p <span class="token string">'请输入新密码: '</span> password    <span class="token keyword">until</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$password</span>"</span> <span class="token punctuation">]</span>    <span class="token keyword">do</span>        <span class="token function">read</span> -p <span class="token string">'请输入新密码: '</span> password    <span class="token keyword">done</span>    <span class="token comment" spellcheck="true">#修改密码</span>    <span class="token function">sed</span> -i <span class="token string">"s/<span class="token variable">$user</span>\s=\s.*/<span class="token variable">$user</span> = <span class="token variable">$password</span>/g"</span> <span class="token variable">${SVN_PATH}</span><span class="token function">passwd</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$GREEN</span>"</span> <span class="token string">'密码重置成功！'</span>    <span class="token keyword">fi</span>    init<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#删除用户权限</span><span class="token keyword">function</span> deleteAuth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sed</span> -i <span class="token string">"/<span class="token variable">$1</span>\s=\s/d"</span> <span class="token variable">${SVN_PATH}</span><span class="token function">passwd</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">"/<span class="token variable">$1</span>\s=\s/d"</span> <span class="token variable">${SVN_PATH}</span>authz    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        colorAdd <span class="token string">"<span class="token variable">$GREEN</span>"</span> <span class="token string">'用户删除成功!'</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#初始化</span><span class="token keyword">function</span> init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>-EOF    请选择：    1.创建项目版本库    2.添加用户<span class="token punctuation">(</span>默认拥有读写权限<span class="token punctuation">)</span>    3.删除版本库    4.删除用户    5.重置用户密码    6.查看所有用户    7.查看所有项目    q.退出    EOF    <span class="token function">read</span> -p <span class="token string">'选项(默认为1): '</span> option    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$option</span>"</span> <span class="token keyword">in</span>        1<span class="token punctuation">)</span> createProject <span class="token punctuation">;</span><span class="token punctuation">;</span>        2<span class="token punctuation">)</span> createUser <span class="token punctuation">;</span><span class="token punctuation">;</span>        3<span class="token punctuation">)</span> deleteProject <span class="token punctuation">;</span><span class="token punctuation">;</span>        4<span class="token punctuation">)</span> deleteUser <span class="token punctuation">;</span><span class="token punctuation">;</span>        5<span class="token punctuation">)</span> changeUser <span class="token punctuation">;</span><span class="token punctuation">;</span>        6<span class="token punctuation">)</span> allUser <span class="token punctuation">;</span><span class="token punctuation">;</span>        7<span class="token punctuation">)</span> allProject <span class="token punctuation">;</span><span class="token punctuation">;</span>        q<span class="token punctuation">)</span> <span class="token keyword">exit</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span> init <span class="token punctuation">;</span><span class="token punctuation">;</span>    esac<span class="token punctuation">}</span>init<span class="token comment" spellcheck="true">#创建成功重启svn</span><span class="token keyword">echo</span> <span class="token string">'完毕！'</span><span class="token punctuation">;</span></code></pre><p>把脚本文件移动到用户命令目录</p><pre><code>mv autosvn.sh /usr/local/bin/autosvn</code></pre><p>然后就可以运行命令<code>autosvn</code>进行操作了</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 运行这个命令</span>autosvn</code></pre><img src="/2021/03/31/centos-an-zhuang-svn-fu-wu/03/31/centos-an-zhuang-svn-fu-wu/image-20210331150207116.png" class title="autosvn界面"><p>根据提示的选项，输入数字即可。</p>]]></content>
      
      
      <categories>
          
          <category> svn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/03/26/zheng-ze-biao-da-shi/"/>
      <url>/2021/03/26/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式-断言"><a href="#正则表达式-断言" class="headerlink" title="正则表达式-断言"></a>正则表达式-断言</h1><p>学习正则表达式中断言的使用</p><blockquote><p>以下单引号标记的内容为表达式所匹配到的内容。</p></blockquote><h2 id="1-正先行断言"><a href="#1-正先行断言" class="headerlink" title="1. ?=... 正先行断言"></a>1. <code>?=...</code> 正先行断言</h2><p><code>?=...</code>正先行断言，表示第一部分表达式后面必须跟着<code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。定义一个正先行断言要使用<code>()</code>。在括号内部使用一个问号和等号：<code>(?=...)</code>。</p><p>正先行断言写在括号内部的等号后面，例如表达式<code>(T|t)he(?=\sfat)</code>匹配<code>The</code>和<code>the</code>，在括号中我们又定义了正先行断言<code>(?=\sfat)</code>，即<code>The</code>和<code>the</code>后面紧跟着<code>(空格)fat</code>。</p><pre><code>&quot;(T|t)he(?=\sfat)&quot; =&gt; &#39;The&#39; fat cat sat on the mat.</code></pre><h2 id="2-负先行断言"><a href="#2-负先行断言" class="headerlink" title="2. ?!...负先行断言"></a>2. <code>?!...</code>负先行断言</h2><p>负先行断言<code>?!</code>用于筛选所有匹配结果，筛选条件为其后不跟随着断言中定义的格式。<code>正先行断言</code>定义和<code>负先行断言</code>一样，区别就是<code>=</code>替换成<code>!</code>，也就是<code>(?!...)</code>。</p><p>表达式<code>(T|t)he(?!\sfat)</code>匹配<code>The</code>和<code>the</code>，且其后不跟着<code>(空格)fat</code>。</p><pre><code>&quot;(T|t)he(?!\sfat)&quot; =&gt; The fat cat sat on &#39;the&#39; mat.</code></pre><h2 id="3-lt-正后发断言"><a href="#3-lt-正后发断言" class="headerlink" title="3. ?&lt;=...正后发断言"></a>3. <code>?&lt;=...</code>正后发断言</h2><p>正后发断言记作<code>(?&lt;=...)</code>用于筛选所偶匹配结果，筛选条件为其前跟随着断言中定义的格式。例如，表达式<code>(?&lt;=(T|t)he)(fat|mat)</code>匹配<code>fat</code>和<code>mat</code>，且其前跟者<code>The</code>或<code>the</code>。</p><pre><code>&quot;(?&lt;=(T|t)he)(fat|mat)&quot; =&gt; The &#39;fat&#39; cat sat on the &#39;mat&#39;.</code></pre><h2 id="4-lt-负后发断言"><a href="#4-lt-负后发断言" class="headerlink" title="4. ?&lt;!...负后发断言"></a>4. <code>?&lt;!...</code>负后发断言</h2><p>负后发断言记作<code>(?&lt;!...)</code>用于筛选所有匹配的结果，筛选条件为其前不跟随着断言中定义的格式。例如，表达式<code>(?&lt;!(T|t)he\s)(cat)</code>匹配<code>cat</code>，且其前不跟着<code>The</code>或<code>the</code>。</p><pre><code>&quot;(?&lt;!(T|t)he)(cat)&quot; =&gt; The cat sat one &#39;cat&#39;.</code></pre>]]></content>
      
      
      <categories>
          
          <category> regex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 切换node版本的工具</title>
      <link href="/2020/12/29/mac-qie-huan-node-ban-ben-de-gong-ju/"/>
      <url>/2020/12/29/mac-qie-huan-node-ban-ben-de-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="MAC-切换node版本的方法"><a href="#MAC-切换node版本的方法" class="headerlink" title="MAC 切换node版本的方法"></a>MAC 切换node版本的方法</h1><blockquote><p>这里我所知道的有两种方法：</p></blockquote><h2 id="1-使用nvm"><a href="#1-使用nvm" class="headerlink" title="1.使用nvm"></a>1.使用nvm</h2><blockquote><p><code>nvm</code> 的选择</p></blockquote><p>我们的选择是<code>nvm</code>，不过目前来说，<code>nvm</code>也存在着很多版本，有<code>nvm</code>，<code>nvm-global</code>，<code>nvm-window</code>，还有<code>brew</code>下的<code>nvm</code>。苏南大叔的目标是在<code>mac</code>系统下面，使用<code>nvm</code>，所以，可用的选择是正统的<code>nvm</code>，还有<code>nvm-global</code>，或者使用<code>brew</code>安装<code>nvm</code>。</p><h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装<code>nvm</code></h2><p>这里介绍安装官方的nvm</p><p>官方地址是：<a href="https://newsn.net/go/66121uxubYZwJNt2TYLGeeFEOZ14pAREGnTsPdWfXeEPEDJNIT6UU1j1ryzn0Ts_t0Ow2F5fEynSxNF5KC4" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>或者</p><pre class=" language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre><p>因为我们要在命令行里面使用<code>nvm</code>命令，所以，这里我们需要对<code>mac</code>系统的系统变量<code>$PATH</code>进行点小小的改造。</p><pre><code>~/.bash_profile</code></pre><p>我们<code>vi</code>一下这个<code>~/.bash_profile</code>文件，然后添加如下内容并保存。</p><pre><code>export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</code></pre><p>然后我们执行一下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bash_profile</code></pre><h3 id="NVM常用的命令"><a href="#NVM常用的命令" class="headerlink" title="NVM常用的命令"></a><code>NVM</code>常用的命令</h3><ul><li>nvm nvm list 是查找本电脑上所有的node版本</li><li>nvm list 查看已经安装的版本</li><li>nvm list installed 查看已经安装的版本</li><li>nvm list available 查看网络可以安装的版本</li><li>nvm install 安装最新版本nvm</li><li>nvm use <version> ## 切换使用指定的版本node</version></li><li>nvm ls 列出所有版本</li><li>nvm current显示当前版本</li><li>nvm alias <name> <version> ## 给不同的版本号添加别名</version></name></li><li>nvm unalias <name> ## 删除已定义的别名</name></li><li>nvm reinstall-packages <version> ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li><li>nvm on 打开nodejs控制</li><li>nvm off 关闭nodejs控制</li><li>nvm proxy 查看设置与代理</li><li>nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 <a href="https://nodejs.org/dist/" target="_blank" rel="noopener">https://nodejs.org/dist/</a></li><li>nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： <a href="https://github.com/npm/npm/archive/" target="_blank" rel="noopener">https://github.com/npm/npm/archive/</a>.</li><li>nvm uninstall <version> 卸载制定的版本</version></li><li>nvm use [version] [arch] 切换制定的node版本和位数</li><li>nvm root [path] 设置和查看root路径</li><li>nvm version 查看当前的版本</li></ul><h2 id="2-使用n"><a href="#2-使用n" class="headerlink" title="2.使用n"></a>2.使用<code>n</code></h2><p>安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g n</code></pre><p>安装最新版本node</p><pre class=" language-bash"><code class="language-bash">n latest</code></pre><p>安装稳定版本node</p><pre class=" language-bash"><code class="language-bash">n stable</code></pre><p>删除某个版本node</p><pre class=" language-bash"><code class="language-bash">n <span class="token function">rm</span> 8.2.1</code></pre><p>以指定的版本来执行脚本</p><pre class=" language-bash"><code class="language-bash">n use 0.10.21 some.jsn use 0.10.21 some.js</code></pre>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor使用详解</title>
      <link href="/2020/12/29/supervisor-shi-yong-xiang-jie/"/>
      <url>/2020/12/29/supervisor-shi-yong-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、supervisor简介"><a href="#一、supervisor简介" class="headerlink" title="一、supervisor简介"></a>一、supervisor简介</h2><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。</p><p><em>注：本文以centos7为例，supervisor版本3.4.0。</em></p><h2 id="二、supervisor安装"><a href="#二、supervisor安装" class="headerlink" title="二、supervisor安装"></a>二、supervisor安装</h2><ol><li><p>配置好yum源后，可以直接安装</p><pre class=" language-undefined"><code class="language-undefined">yum install supervisor</code></pre></li><li><p>Debian/Ubuntu可通过apt安装</p><pre class=" language-csharp"><code class="language-csharp">apt<span class="token operator">-</span><span class="token keyword">get</span> install supervisor</code></pre></li><li><p>pip安装</p><pre class=" language-undefined"><code class="language-undefined">pip install supervisor</code></pre></li><li><p>easy_install安装</p><pre class=" language-undefined"><code class="language-undefined">easy_install supervisor</code></pre></li></ol><h2 id="三、supervisor使用"><a href="#三、supervisor使用" class="headerlink" title="三、supervisor使用"></a>三、supervisor使用</h2><h5 id="supervisor配置文件：-etc-supervisord-conf"><a href="#supervisor配置文件：-etc-supervisord-conf" class="headerlink" title="supervisor配置文件：/etc/supervisord.conf"></a>supervisor配置文件：<code>/etc/supervisord.conf</code></h5><p><em>注：supervisor的配置文件默认是不全的，不过在大部分默认的情况下，上面说的基本功能已经满足。</em></p><h5 id="子进程配置文件路径：-etc-supervisord-d"><a href="#子进程配置文件路径：-etc-supervisord-d" class="headerlink" title="子进程配置文件路径：/etc/supervisord.d/"></a>子进程配置文件路径：<code>/etc/supervisord.d/</code></h5><p><em>注：默认子进程配置文件为ini格式，可在supervisor主配置文件中修改。</em></p><h2 id="四、配置文件说明"><a href="#四、配置文件说明" class="headerlink" title="四、配置文件说明"></a>四、配置文件说明</h2><h4 id="supervisor-conf配置文件说明："><a href="#supervisor-conf配置文件说明：" class="headerlink" title="supervisor.conf配置文件说明："></a>supervisor.conf配置文件说明：</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">[</span>unix_http_server<span class="token punctuation">]</span>file<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>supervisor<span class="token punctuation">.</span>sock   <span class="token punctuation">;</span>UNIX socket 文件，supervisorctl 会使用<span class="token punctuation">;</span>chmod<span class="token operator">=</span><span class="token number">0700</span>                 <span class="token punctuation">;</span>socket文件的mode，默认是<span class="token number">0700</span><span class="token punctuation">;</span>chown<span class="token operator">=</span>nobody<span class="token operator">:</span>nogroup       <span class="token punctuation">;</span>socket文件的owner，格式：uid<span class="token operator">:</span>gid<span class="token punctuation">;</span><span class="token punctuation">[</span>inet_http_server<span class="token punctuation">]</span>         <span class="token punctuation">;</span>HTTP服务器，提供web管理界面<span class="token punctuation">;</span>port<span class="token operator">=</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9001</span>        <span class="token punctuation">;</span>Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性<span class="token punctuation">;</span>username<span class="token operator">=</span>user              <span class="token punctuation">;</span>登录管理后台的用户名<span class="token punctuation">;</span>password<span class="token operator">=</span><span class="token number">123</span>               <span class="token punctuation">;</span>登录管理后台的密码<span class="token punctuation">[</span>supervisord<span class="token punctuation">]</span>logfile<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>supervisord<span class="token punctuation">.</span>log <span class="token punctuation">;</span>日志文件，默认是 $CWD<span class="token operator">/</span>supervisord<span class="token punctuation">.</span>loglogfile_maxbytes<span class="token operator">=</span>50MB        <span class="token punctuation">;</span>日志文件大小，超出会rotate，默认 50MB，如果设成<span class="token number">0</span>，表示不限制大小logfile_backups<span class="token operator">=</span><span class="token number">10</span>           <span class="token punctuation">;</span>日志文件保留备份数量默认<span class="token number">10</span>，设为<span class="token number">0</span>表示不备份loglevel<span class="token operator">=</span>info                <span class="token punctuation">;</span>日志级别，默认info，其它<span class="token operator">:</span> debug<span class="token punctuation">,</span>warn<span class="token punctuation">,</span>tracepidfile<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>supervisord<span class="token punctuation">.</span>pid <span class="token punctuation">;</span>pid 文件nodaemon<span class="token operator">=</span><span class="token boolean">false</span>               <span class="token punctuation">;</span>是否在前台启动，默认是<span class="token boolean">false</span>，即以 daemon 的方式启动minfds<span class="token operator">=</span><span class="token number">1024</span>                  <span class="token punctuation">;</span>可以打开的文件描述符的最小值，默认 <span class="token number">1024</span>minprocs<span class="token operator">=</span><span class="token number">200</span>                 <span class="token punctuation">;</span>可以打开的进程数的最小值，默认 <span class="token number">200</span><span class="token punctuation">[</span>supervisorctl<span class="token punctuation">]</span>serverurl<span class="token operator">=</span>unix<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><span class="token punctuation">;</span>serverurl<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9001</span> <span class="token punctuation">;</span> 通过HTTP的方式连接supervisord<span class="token punctuation">;</span> <span class="token punctuation">[</span>program<span class="token operator">:</span>xx<span class="token punctuation">]</span>是被管理的进程配置参数，xx是进程的名称<span class="token punctuation">[</span>program<span class="token operator">:</span>xx<span class="token punctuation">]</span>command<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-8.0</span><span class="token punctuation">.</span><span class="token number">35</span><span class="token operator">/</span>bin<span class="token operator">/</span>catalina<span class="token punctuation">.</span>sh run  <span class="token punctuation">;</span> 程序启动命令autostart<span class="token operator">=</span><span class="token boolean">true</span>       <span class="token punctuation">;</span> 在supervisord启动的时候也自动启动startsecs<span class="token operator">=</span><span class="token number">10</span>         <span class="token punctuation">;</span> 启动<span class="token number">10</span>秒后没有异常退出，就表示进程正常启动了，默认为<span class="token number">1</span>秒autorestart<span class="token operator">=</span><span class="token boolean">true</span>     <span class="token punctuation">;</span> 程序退出后自动重启<span class="token punctuation">,</span>可选值：<span class="token punctuation">[</span>unexpected<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span>，默认为unexpected，表示进程意外杀死后才重启startretries<span class="token operator">=</span><span class="token number">3</span>       <span class="token punctuation">;</span> 启动失败自动重试次数，默认是<span class="token number">3</span>user<span class="token operator">=</span>tomcat          <span class="token punctuation">;</span> 用哪个用户启动进程，默认是rootpriority<span class="token operator">=</span><span class="token number">999</span>         <span class="token punctuation">;</span> 进程启动优先级，默认<span class="token number">999</span>，值小的优先启动redirect_stderr<span class="token operator">=</span><span class="token boolean">true</span> <span class="token punctuation">;</span> 把<span class="token constant">stderr</span>重定向到<span class="token constant">stdout</span>，默认<span class="token boolean">false</span>stdout_logfile_maxbytes<span class="token operator">=</span>20MB  <span class="token punctuation">;</span> <span class="token constant">stdout</span> 日志文件大小，默认50MBstdout_logfile_backups <span class="token operator">=</span> <span class="token number">20</span>   <span class="token punctuation">;</span> <span class="token constant">stdout</span> 日志文件备份数，默认是<span class="token number">10</span><span class="token punctuation">;</span> <span class="token constant">stdout</span> 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-8.0</span><span class="token punctuation">.</span><span class="token number">35</span><span class="token operator">/</span>logs<span class="token operator">/</span>catalina<span class="token punctuation">.</span>outstopasgroup<span class="token operator">=</span><span class="token boolean">false</span>     <span class="token punctuation">;</span>默认为<span class="token boolean">false</span><span class="token punctuation">,</span>进程被杀死时，是否向这个进程组发送stop信号，包括子进程killasgroup<span class="token operator">=</span><span class="token boolean">false</span>     <span class="token punctuation">;</span>默认为<span class="token boolean">false</span>，向进程组发送kill信号，包括子进程<span class="token punctuation">;</span>包含其它配置文件<span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> relative<span class="token operator">/</span>directory<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>ini    <span class="token punctuation">;</span>可以指定一个或多个以<span class="token punctuation">.</span>ini结束的配置文件</code></pre><h4 id="子进程配置文件说明："><a href="#子进程配置文件说明：" class="headerlink" title="子进程配置文件说明："></a>子进程配置文件说明：</h4><p>给需要管理的子进程(程序)编写一个配置文件，放在<code>/etc/supervisor.d/</code>目录下，以<code>.ini</code>作为扩展名（每个进程的配置文件都可以单独分拆也可以把相关的脚本放一起）。如任意定义一个和脚本相关的项目名称的选项组（/etc/supervisord.d/test.conf）：</p><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#项目名</span><span class="token punctuation">[</span>program<span class="token symbol">:blog</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#脚本目录</span>directory<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>bin<span class="token comment" spellcheck="true">#脚本执行命令</span>command<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python <span class="token operator">/</span>opt<span class="token operator">/</span>bin<span class="token operator">/</span>test<span class="token punctuation">.</span>py<span class="token comment" spellcheck="true">#supervisor启动的时候是否随着同时启动，默认True</span>autostart<span class="token operator">=</span><span class="token keyword">true</span><span class="token comment" spellcheck="true">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span>autorestart<span class="token operator">=</span><span class="token keyword">false</span><span class="token comment" spellcheck="true">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span>startsecs<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#脚本运行的用户身份 </span>user <span class="token operator">=</span> test<span class="token comment" spellcheck="true">#日志输出 </span>stderr_logfile<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>blog_stderr<span class="token punctuation">.</span>log stdout_logfile<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>blog_stdout<span class="token punctuation">.</span>log <span class="token comment" spellcheck="true">#把stderr重定向到stdout，默认 false</span>redirect_stderr <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">#stdout日志文件大小，默认 50MB</span>stdout_logfile_maxbytes <span class="token operator">=</span> 20MB<span class="token comment" spellcheck="true">#stdout日志文件备份数</span>stdout_logfile_backups <span class="token operator">=</span> <span class="token number">20</span></code></pre><h5 id="子进程配置示例："><a href="#子进程配置示例：" class="headerlink" title="子进程配置示例："></a>子进程配置示例：</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#说明同上</span><span class="token punctuation">[</span>program:test<span class="token punctuation">]</span> directory<span class="token operator">=</span>/opt/bin command<span class="token operator">=</span>/opt/bin/testautostart<span class="token operator">=</span>true autorestart<span class="token operator">=</span>false stderr_logfile<span class="token operator">=</span>/tmp/test_stderr.log stdout_logfile<span class="token operator">=</span>/tmp/test_stdout.log <span class="token comment" spellcheck="true">#user = test  </span></code></pre><h2 id="五、supervisor命令说明"><a href="#五、supervisor命令说明" class="headerlink" title="五、supervisor命令说明"></a>五、supervisor命令说明</h2><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><pre class=" language-cpp"><code class="language-cpp">supervisorctl status        <span class="token comment" spellcheck="true">//查看所有进程的状态</span>supervisorctl stop es       <span class="token comment" spellcheck="true">//停止es</span>supervisorctl start es      <span class="token comment" spellcheck="true">//启动es</span>supervisorctl restart       <span class="token comment" spellcheck="true">//重启es</span>supervisorctl update        <span class="token comment" spellcheck="true">//配置文件修改后使用该命令加载新的配置</span>supervisorctl reload        <span class="token comment" spellcheck="true">//重新启动配置中的所有程序</span></code></pre><p>注：把<code>es</code>换成<code>all</code>可以管理配置中的所有进程。直接输入<code>supervisorctl</code>进入supervisorctl的shell交互界面，此时上面的命令不带supervisorctl可直接使用。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>使用supervisor进程管理命令之前先启动supervisord，否则程序报错。<br> 使用命令<code>supervisord -c /etc/supervisord.conf</code>启动。<br> 若是centos7：</p><pre class=" language-cpp"><code class="language-cpp">systemctl start supervisord<span class="token punctuation">.</span>service     <span class="token comment" spellcheck="true">//启动supervisor并加载默认配置文件</span>systemctl enable supervisord<span class="token punctuation">.</span>service    <span class="token comment" spellcheck="true">//将supervisor加入开机启动项</span></code></pre><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><ol><li>unix:///var/run/supervisor.sock no such file<br> 问题描述：安装好supervisor没有开启服务直接使用supervisorctl报的错<br> 解决办法：<code>supervisord -c /etc/supervisord.conf</code></li><li>command中指定的进程已经起来，但supervisor还不断重启<br> 问题描述：command中启动方式为后台启动，导致识别不到pid，然后不断重启，这里使用的是elasticsearch，command指定的是<code>$path/bin/elasticsearch -d</code><br> 解决办法：supervisor无法检测后台启动进程的pid，而supervisor本身就是后台启动守护进程，因此不用担心这个</li><li>启动了多个supervisord服务，导致无法正常关闭服务<br> 问题描述：在运行<code>supervisord -c /etc/supervisord.conf</code>之前，直接运行过<code>supervisord -c /etc/supervisord.d/xx.conf</code>导致有些进程被多个superviord管理，无法正常关闭进程。<br> 解决办法：使用<code>ps -fe | grep supervisord</code>查看所有启动过的supervisord服务，kill相关的进程。</li></ol><h5 id="更多信息请移步Supervisor官网：http-supervisord-org"><a href="#更多信息请移步Supervisor官网：http-supervisord-org" class="headerlink" title="更多信息请移步Supervisor官网：http://supervisord.org"></a>更多信息请移步Supervisor官网：<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fsupervisord.org" target="_blank" rel="noopener">http://supervisord.org</a></h5>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装mqtt</title>
      <link href="/2020/08/09/centos-an-zhuang-mqtt/"/>
      <url>/2020/08/09/centos-an-zhuang-mqtt/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-安装MQTT服务和php扩展"><a href="#Centos-7-安装MQTT服务和php扩展" class="headerlink" title="Centos 7 安装MQTT服务和php扩展"></a>Centos 7 安装MQTT服务和php扩展</h1><h1 id="安装Mosquitto"><a href="#安装Mosquitto" class="headerlink" title="安装Mosquitto"></a>安装Mosquitto</h1><p>CentOS 7 默认没有<code>mosquitto</code>包。要安装它，首先我们将安装一个额外的软件软件包，即 <code>EPEL</code>的额外软件存储库。该存储库中充满了可在CentOS，Red Hat和其他面向企业的Linux发行版上的软件。</p><p>使用<code>yum</code>软件包管理器安装<code>epel-release</code>软件包。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum -y <span class="token function">install</span> epel-release</code></pre><pre class=" language-javascript"><code class="language-javascript">sudo yum <span class="token operator">-</span>y install mosquitto</code></pre><p>该软件包带有一个简单的默认配置，所以让我们运行它来测试我们是否安装成功。</p><pre class=" language-javascript"><code class="language-javascript">sudo systemctl start mosquitto</code></pre><p>我们还需要启用服务，以确保它在重新启动系统时启动： </p><pre class=" language-javascript"><code class="language-javascript">sudo systemctl enable mosquitto</code></pre><p>现在让我们测试默认配置。<code>mosquitto</code>包附带了一些MQTT客户端命令行。我们将使用其中一个订阅代理上的<strong>主题。</strong> </p><p><strong>主题</strong>是您发布消息并订阅的标签。它们按等级排列，你可以有<code>sensors/outside/temp</code>和<code>sensors/outside/humidity</code>。在本教程中，我们将使用一个简单的测试主题来测试配置。 </p><p>您需要创建一个新的终端，创建方法很简单，重新打开一个新的终端页面，重新登录服务器即可。在新的终端中，使用<code>mosquitto_sub</code>订阅测试主题： </p><pre class=" language-javascript"><code class="language-javascript">mosquitto_sub <span class="token operator">-</span>h localhost <span class="token operator">-</span>t test</code></pre><p><code>-h</code>用于指定MQTT服务器的主机名，<code>-t</code>是主题名称。按<code>ENTER</code>后你将看不到输出，因为<code>mosquitto_sub</code>正在等待消息到达。切换第一个终端并发布消息：</p><pre class=" language-javascript"><code class="language-javascript">mosquitto_pub <span class="token operator">-</span>h localhost <span class="token operator">-</span>t test <span class="token operator">-</span>m <span class="token string">"hello world"</span></code></pre><p><code>mosquitto_pub</code>的选项与<code>mosquitto_sub</code>相同，这一次我们使用了额外的<code>-m</code>选项来指定我们的消息。点击<code>ENTER</code>，你应该看看<code>hello world</code> 输出在在另一个终端中。你已经学会发送第一条MQTT信息！ </p><h2 id="安装生成PHP扩展mosquitto-so的依赖包"><a href="#安装生成PHP扩展mosquitto-so的依赖包" class="headerlink" title="安装生成PHP扩展mosquitto.so的依赖包"></a>安装生成PHP扩展mosquitto.so的依赖包</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> mosquitto-devel</code></pre><h2 id="使用PECL方法安装Mosquitto扩展"><a href="#使用PECL方法安装Mosquitto扩展" class="headerlink" title="使用PECL方法安装Mosquitto扩展"></a>使用PECL方法安装Mosquitto扩展</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> pecl <span class="token function">install</span> Mosquitto-alpha</code></pre><p>回车就会自动安装完成</p><h2 id="php-ini添加扩展名称"><a href="#php-ini添加扩展名称" class="headerlink" title="php.ini添加扩展名称"></a>php.ini添加扩展名称</h2><p><code>extension=mosquitto.so</code></p><h2 id="重启php-fpm"><a href="#重启php-fpm" class="headerlink" title="重启php-fpm"></a>重启php-fpm</h2><pre class=" language-bash"><code class="language-bash">systemctl restart php-fpm</code></pre><h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><pre class=" language-bash"><code class="language-bash">php -m <span class="token operator">|</span> <span class="token function">grep</span> mosquitto</code></pre><p>输出：<code>mosquitto</code> 则表示安装成功！</p>]]></content>
      
      
      <categories>
          
          <category> mqtt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果命令行制作原版镜像</title>
      <link href="/2020/08/09/hei-ping-guo-ming-ling-xing-zhi-zuo-yuan-ban-jing-xiang/"/>
      <url>/2020/08/09/hei-ping-guo-ming-ling-xing-zhi-zuo-yuan-ban-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="黑苹果制作原版镜像的方式"><a href="#黑苹果制作原版镜像的方式" class="headerlink" title="黑苹果制作原版镜像的方式"></a>黑苹果制作原版镜像的方式</h1><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ol><li>16G U盘一个（用来制作安装盘）</li><li>mac系统(下载原版镜像)</li></ol><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><ol><li>通过appstore下载想要安装的原版镜像</li><li>插上U盘，格式化为扩展日志式,选择guid分区表，并重命名为USB</li><li>打开终端，输入对应的命令</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#macOS Catalina 10.15.x</span><span class="token function">sudo</span> /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/USB /Applications/Install\ macOS\ Catalina.app --nointeraction<span class="token comment" spellcheck="true">#macOS Mojave 10.14.x</span><span class="token function">sudo</span> /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/USB /Applications/Install\ macOS\ Mojave.app --nointeraction<span class="token comment" spellcheck="true">#macOS High Sierra 10.13.x</span><span class="token function">sudo</span> /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/USB --applicationpath /Applications/Install\ macOS\ High\ Sierra.app --nointeraction<span class="token comment" spellcheck="true">#macOS Sierra 10.12.x</span><span class="token function">sudo</span> /Applications/Install\ macOS\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/USB --applicationpath /Applications/Install\ macOS\ Sierra.app --nointeraction</code></pre><blockquote><p>等待结束就完成了镜像的写入</p></blockquote><img src="/2020/08/09/hei-ping-guo-ming-ling-xing-zhi-zuo-yuan-ban-jing-xiang/08/09/hei-ping-guo-ming-ling-xing-zhi-zuo-yuan-ban-jing-xiang/image-20200809110502648.png" class title="过程"><h2 id="导入EFI引导文件"><a href="#导入EFI引导文件" class="headerlink" title="导入EFI引导文件"></a>导入EFI引导文件</h2><h3 id="此处介绍命令行的方式挂载隐藏的分区"><a href="#此处介绍命令行的方式挂载隐藏的分区" class="headerlink" title="此处介绍命令行的方式挂载隐藏的分区"></a>此处介绍命令行的方式挂载隐藏的分区</h3><p>查看分区列表</p><pre class=" language-bash"><code class="language-bash">diskutil list</code></pre>{% asset_img image-20200809110803182.png 分区表 %}<p>挂载分区（请自行查看自己的分区名称）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> diskutil <span class="token function">mount</span> disk4s1</code></pre><p>然后打开访达就可以看到EFI分区了，打开EFI分区，拖入你的EFI引导文件就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> 黑苹果 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel event(事件)的使用方法</title>
      <link href="/2020/08/04/laravel-event-shi-jian-de-shi-yong-fang-fa/"/>
      <url>/2020/08/04/laravel-event-shi-jian-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-event-事件处理"><a href="#Laravel-event-事件处理" class="headerlink" title="Laravel event 事件处理"></a>Laravel event 事件处理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>事件是一种常见的观察者模式的应用。简单的来说，就是当… 干…。这个当… 和干… 在 Laravel 事件中分别对应：<br>当 (event)… 干 (listener)…<br>放置 event 和 listener 文件的位置分别是：</p><pre><code>app/Eventsapp/listeners</code></pre><h2 id="创建模板命令"><a href="#创建模板命令" class="headerlink" title="创建模板命令"></a>创建模板命令</h2><pre class=" language-php"><code class="language-php">php artisan event<span class="token punctuation">:</span>generate</code></pre><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><p><strong><em>App/events</em></strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Podcast</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>Event</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>SerializesModels</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">PodcastWasPurchased</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span>    <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">SerializesModels</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$podcast</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * Create a new event instance.    *    * @param Podcast $podcast    * @return void    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Podcast <span class="token variable">$podcast</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">podcast</span> <span class="token operator">=</span> <span class="token variable">$podcast</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong><em>app/listeners</em></strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>PodcastWasPurchased</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>InteractsWithQueue</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">EmailPurchaseConfirmation</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * Create the event listener.    *    * @return void    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * Handle the event.    *    * @param PodcastWasPurchased $event    * @return void    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>PodcastWasPurchased <span class="token variable">$event</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Access the podcast using $event->podcast...</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>handler 里就是写业务逻辑的地方了，这里可以用 type-hint 依赖注入的方式，注入任何你需要的类。<br>将 Event 和 Listener 绑定并注册</p><p>这里就用到 Service Provider: providers/EventServiceProvider.php 注册事件和 Listener：</p><pre class=" language-php"><code class="language-php"> <span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'App\Events\PodcastWasPurchased'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'App\Listeners\EmailPurchaseConfirmation'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>触发事件</p><p>经过上面的设置，你的事件和事件处理器就可以在 controller 里使用了：</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Event</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Podcast</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>PodcastWasPurchased</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * Show the profile for the given user.    *    * @param int $userId    * @param int $podcastId    * @return Response    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">purchasePodcast</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token variable">$podcastId</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token variable">$podcast</span> <span class="token operator">=</span> Podcast<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token variable">$podcastId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// Purchase podcast logic...</span>          Event<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PodcastWasPurchased</span><span class="token punctuation">(</span><span class="token variable">$podcast</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Event::fire (new PodcastWasPurchased ($podcast)); 就是触发事件的写法，程序运行到这里，就会触发跟这个事件绑定的 listener (handler)。<br>Event::fire () 有个辅助函数可以简写：</p><pre class=" language-php"><code class="language-php"><span class="token function">event</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PodcastWasPurchased</span><span class="token punctuation">(</span><span class="token variable">$podcast</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将事件加入队列</p><p>如果要处理的事件很多，那么会影响当前进程的执行效率，这时我们需要把事件加入队列，让它延迟异步执行。</p><p>定义队列执行是在 Listener 那里定义的：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>PodcastWasPurchased</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>InteractsWithQueue</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">EmailPurchaseConfirmation</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span></code></pre><p>只要 implements ShouldQueue 一下就好了。</p><p>如果你想手动指定一下任务延迟执行的时间：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>PodcastWasPurchased</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>InteractsWithQueue</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">EmailPurchaseConfirmation</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span>    <span class="token punctuation">{</span>        <span class="token keyword">use</span> <span class="token package">InteractsWithQueue</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>PodcastWasPurchased <span class="token variable">$event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>触发后延迟 10 秒执行。<br>事件订阅 (Event Subscribers)</p><p>Event Subscribers 是一种特殊的 Listener, 前面讲的是一个 listener 里只能放一个 hander（），事件订阅可以把很多处理器（handler）放到一个类里面，然后用一个 listner 把它们集合起来，这样不同的事件只要对应一个 listner 就可以了。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UserEventListener</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * Handle user login events.    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onUserLogin</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * Handle user logout events.    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">onUserLogout</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * Register the listeners for the subscriber.    *    * @param Illuminate\Events\Dispatcher $events    * @return array    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token variable">$events</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$events</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">listen</span><span class="token punctuation">(</span>            <span class="token string">'App\Events\UserLoggedIn'</span><span class="token punctuation">,</span>            <span class="token string">'App\Listeners\UserEventListener@onUserLogin'</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$events</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">listen</span><span class="token punctuation">(</span>            <span class="token string">'App\Events\UserLoggedOut'</span><span class="token punctuation">,</span>            <span class="token string">'App\Listeners\UserEventListener@onUserLogout'</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看后面的 subscribe ()，每个事件和处理器是一一对应的。<br>绑定 Event Subscriber 到 Service Provider</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>Dispatcher</span> <span class="token keyword">as</span> DispatcherContract<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Providers<span class="token punctuation">\</span>EventServiceProvider</span> <span class="token keyword">as</span> ServiceProvider<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * The event listener mappings for the application.    *    * @var array    */</span>    <span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * The subscriber classes to register.    *    * @var array    */</span>    <span class="token keyword">protected</span> <span class="token variable">$subscribe</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'App\Listeners\UserEventListener'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>究竟为什么要使用 Event</p><p>使用 Event 一段时间后，你可以觉得比较麻烦，想知道到底有什么好处。<br>假设创建一个类 Event， 那么 $event-&gt;sendWelcomeMessage ($user) 这样去使用， 和用观察者模式的事件有啥区别，观察者模式好处在哪里？</p><p>首先你要明白，事件是一种『钩子』，Fire 事件的位置就是放置钩子的地方。而上面那种写法是直接嵌入的，没有钩子，也就是说，上面的写法没有事件的概念，事件是不用管你怎么做的，事件只定义发生了什么事（当… 时），这样就可以解耦。</p><p>区别就在于，在主逻辑线上的事件，没有做任何事情，它只是说有这样一件事，对于这件事，你可以做点事情，也可以什么都不做。而 $event-&gt;sendWelcomeMessage ($user) 这种写法就是 hardcoding 了，到了那个地方必须发生 sendWelcomeMessage 这个行为。</p><p>作为团队的一个 leader，你可以把主逻辑定义后，然后在主逻辑线上设计事件节点，然后把具体怎么处理这些事件的事务交给团队里的成员去做，成员根本不用管主逻辑和插入事件（钩子）的地方，成员只用写触发事件时要处理的逻辑就可以了。</p><p>这样是不是很方便合理啊，如果把所有处理逻辑都写在 Event 类里面，那多人处理的时候岂不是要同时修改一个文件，这样就会有版本冲突问题。</p><p>另外 Event 还可以异步队列执行，这也是好处之一。</p><p>=====================================================================================================</p><p>概念 + 基础使用</p><p>先说一下在什么场景会使用这个事件功能。</p><p>事情大概是这样的，需求要在用户注册的时候发一些帮助邮件给用户（原本用户在注册之后已经有发别的邮件的了，短信，IM 什么的）</p><p>原来这个注册的方法也就 10 多行代码。但是有时候我们为了省事，直接在注册代码后面添加了各种代码。</p><p>例如这个注册方法本来是这样的</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Htt<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取参数</span>            <span class="token comment" spellcheck="true">//验证参数</span>            <span class="token comment" spellcheck="true">//写入数据库</span>            <span class="token comment" spellcheck="true">//return 注册信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>现在有一个需求，要求注册之后给用户的邮箱发一个广告，绝大多数的人（也包括以前的我）就直接在这后面接着写代码了</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Htt<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取参数</span>            <span class="token comment" spellcheck="true">//验证参数</span>            <span class="token comment" spellcheck="true">//写入数据库</span>            <span class="token comment" spellcheck="true">//发送广告邮件</span>            <span class="token comment" spellcheck="true">//return 注册信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这是比较直观的写法，后来又有需求要发个短信。</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Htt<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取参数</span>            <span class="token comment" spellcheck="true">//验证参数</span>            <span class="token comment" spellcheck="true">//写入数据库</span>            <span class="token comment" spellcheck="true">//发送广告邮件</span>            <span class="token comment" spellcheck="true">//发送短信</span>            <span class="token comment" spellcheck="true">//return 注册信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>然后又有需求，要发 IM 消息，这样的需求很多。这些方法如果你封装了，可能也就一行代码。</p><p>但是，在实际项目中，这个注册方法里面已经加了很多东西。如果多人开发的话各种不方便。然后想到了 laravel 似乎有这个功能，但是一直都不知道怎么应用，仔细看了一下手册，发现和自己的想法不谋而合。</p><p>laravel 的事件功能实际上更倾向是一种管理手段，并不是没了它我们就做不到了，只是它能让我们做得更加好，更加优雅。</p><p>laravel 的事件是一种管理 + 实现的体现，它首先有一个总的目录，然后我们可以宏观的看到所有的事件，而不需要每次都要打开控制器的方法我们才能知道注册后会发生什么，这一点很重要，非常的方便，我就不按着 laravel 的顺序来讲，而是按着实际情况来建立这种关系。</p><p>现在我们无非就是要在注册之后要做一系列的事情，首先得注册完之后调用一个事件，然后这个事件再做各种各样的事</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Htt<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//我们先引入一个事件类，名字自定义的，之后再一步一步创建</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>Register</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取参数</span>            <span class="token comment" spellcheck="true">//验证参数</span>            <span class="token comment" spellcheck="true">//写入数据库</span>            <span class="token comment" spellcheck="true">//触发事件，以后所有需要注册后要做的事情，都不需要再这里加代码了，我们只需要管理事件就好了</span>            <span class="token comment" spellcheck="true">//event方法是laravel自带方法, $uid是外部参数，看你需要做什么，传什么参数了。注册之后肯定有$uid的嘛</span>            <span class="token function">event</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Register</span><span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return 注册信息</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>找到 \app\Providers\EventServiceProvider.php 文件。给它添加关系，告诉系统，有人用 event () 调用了事件之后要被谁监听得到。</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Providers</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Laravel<span class="token punctuation">\</span>Lumen<span class="token punctuation">\</span>Providers<span class="token punctuation">\</span>EventServiceProvider</span> <span class="token keyword">as</span> ServiceProvider<span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">EventServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * The event listener mappings for the application.         *         * @var array         */</span>        <span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true">// 用户注册后的事件</span>            <span class="token string">'App\Events\Register'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>                <span class="token comment" spellcheck="true">// 发送广告邮件</span>                <span class="token string">'App\Listeners\SendAdMail'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 发送短信</span>                <span class="token string">'App\Listeners\SendSms'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 发送帮助信息</span>                <span class="token string">'App\Listeners\SendHelpInformation'</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里是注册事件的入口，相当于一个总目录，这样就可以跟注册代码解耦了，以后要加东西我们就不需要再去看注册方法的代码了</p><p>现在注册完之后会触发这个 App\Events\Register 类，然后这个类会被 App\Listeners\SendAdMail,App\Listeners\SendSms，App\Listeners\SendHelpInformation 监听得到，我们进入 app\Events 目录，创建 Register 这个类</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Events</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Register</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$uid</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 创建一个新的事件实例.         *         * @param  Order  $order         * @return void         */</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">uid</span> <span class="token operator">=</span> <span class="token variable">$uid</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这样就可以了。</p><p>然后去 app\Listeners 目录创建各种要做的事件监听类。</p><pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>    <span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Listeners</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Events<span class="token punctuation">\</span>Register</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Models<span class="token punctuation">\</span>User</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">SendHelpInformation</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>Register <span class="token variable">$event</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$event</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">uid</span><span class="token punctuation">;</span>            <span class="token variable">$user</span> <span class="token operator">=</span> User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//......各种实现</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个 handle 方法就是我们要做的具体实现了，有个很方便的功能就是如果 implements ShouldQueue 这个接口的话就会异步队列执行，如果去掉的话就是同步执行。很方便有没有，这样代码就解耦了，不需要再管注册代码了，在这里就能很方便的管理了。多人开发也是单独写自己的 Listeners 就可以了。</p><p>转载于 <a href="https://learnku.com/articles/20712" target="_blank" rel="noopener">https://learnku.com/articles/20712</a></p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次模型的关联操作</title>
      <link href="/2020/07/24/ji-lu-yi-ci-mo-xing-de-guan-lian-cao-zuo/"/>
      <url>/2020/07/24/ji-lu-yi-ci-mo-xing-de-guan-lian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一次模型关联操作"><a href="#记录一次模型关联操作" class="headerlink" title="记录一次模型关联操作"></a>记录一次模型关联操作</h1><h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$floor_info</span> <span class="token operator">=</span> CommunityFloorModel<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$floor_info</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="一对多更新"><a href="#一对多更新" class="headerlink" title="一对多更新"></a>一对多更新</h2><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$floor_info</span> <span class="token operator">=</span> CommunityFloorModel<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$floor_info</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'status'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'update_time'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="一对多删除"><a href="#一对多删除" class="headerlink" title="一对多删除"></a>一对多删除</h2><pre class=" language-php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CommunityFloorModel<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'room'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$query</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'floor_id'</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>官方文档并没有说明删除的操作，此处记录备用！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> thinkphp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型关联 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-学习记录</title>
      <link href="/2020/07/18/linux-xue-xi-ji-lu/"/>
      <url>/2020/07/18/linux-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Liunx-（centos8）-学习记录"><a href="#Liunx-（centos8）-学习记录" class="headerlink" title="Liunx （centos8） 学习记录"></a>Liunx （centos8） 学习记录</h1><h2 id="rpm（红帽软件包管理器）"><a href="#rpm（红帽软件包管理器）" class="headerlink" title="rpm（红帽软件包管理器）"></a>rpm（红帽软件包管理器）</h2><table><thead><tr><th>描述</th><th>命令</th></tr></thead><tbody><tr><td>安装软件的命令格式</td><td>rpm -ivh filename.rpm</td></tr><tr><td>升级软件的命令格式</td><td>rpm -Uvh filename.rpm</td></tr><tr><td>卸载软件的命令格式</td><td>rpm -e filename.rpm</td></tr><tr><td>查询软件描述信息的命令格式</td><td>rpm -qpi filename.rpm</td></tr><tr><td>列出软件文件信息的命令格式</td><td>rpm -qpl filename.rpm</td></tr><tr><td>查询文件属于哪个 RPM 的命令格式</td><td>rpm -qf filename</td></tr></tbody></table><h2 id="yum软件仓库"><a href="#yum软件仓库" class="headerlink" title="yum软件仓库"></a>yum软件仓库</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist all</td><td>列出所有仓库</td></tr><tr><td>yum list all</td><td>列出仓库中所有软件包</td></tr><tr><td>yum info 软件包名称</td><td>查看软件包信息</td></tr><tr><td>yum install 软件包名称</td><td>安装软件包</td></tr><tr><td>yum reinstall 软件包名称</td><td>重新安装软件包</td></tr><tr><td>yum update 软件包名称</td><td>升级软件包</td></tr><tr><td>yum rempve 软件包名称</td><td>删除软件包</td></tr><tr><td>yum clean all</td><td>清除所有仓库缓存</td></tr><tr><td>yum check-update</td><td>检查可更新的软件包</td></tr><tr><td>yum grouplist</td><td>查看系统中已经安装的软件包组</td></tr><tr><td>yum groupinstall 软件包组</td><td>安装指定的软件包组</td></tr><tr><td>yum groupremove 软件包组</td><td>删除指定的软件包组</td></tr><tr><td>Yum groupinfo 软件包组</td><td>查看指定的软件包组信息</td></tr></tbody></table><blockquote><p>RPM 是为了简化安装的复杂度，而 Yum 软件仓库是为了解决软件包之间的依赖关系</p><p>RHEL 7 系统采用了 systemd 作为初始化进程，那么如何查看某个服务的运行状态？</p><p>答：执行命令“systemctl status 服务名.service”可查看服务的运行状态，其中服务名后</p><p>的.service 可以省略。</p></blockquote><h2 id="systemctl-与-service"><a href="#systemctl-与-service" class="headerlink" title="systemctl 与 service"></a>systemctl 与 service</h2><img src="/2020/07/18/linux-xue-xi-ji-lu/07/18/linux-xue-xi-ji-lu/image-20200718220114119.png" class title="对比"><h2 id="必须掌握的命令"><a href="#必须掌握的命令" class="headerlink" title="必须掌握的命令"></a>必须掌握的命令</h2><h3 id="1-echo"><a href="#1-echo" class="headerlink" title="1.echo"></a>1.echo</h3><h3 id="2-date"><a href="#2-date" class="headerlink" title="2.date"></a>2.date</h3><ul><li><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> 设置系统时间： <code>date -s &quot;20200701 8:30:00&quot;</code> %j表示今天是当年中的第几天 <code>date &quot;+%j&quot;</code></li></ul><h3 id="3-reboot-重启"><a href="#3-reboot-重启" class="headerlink" title="3.reboot 重启"></a>3.reboot 重启</h3><h3 id="4-poweroff-关机"><a href="#4-poweroff-关机" class="headerlink" title="4.poweroff 关机"></a>4.poweroff 关机</h3><h3 id="5-wget-命令行下载"><a href="#5-wget-命令行下载" class="headerlink" title="5.wget 命令行下载"></a>5.wget 命令行下载</h3><ul><li>-b 后台下载模式</li><li>-P下载到指定目录</li><li>-t 最大尝试次数</li><li>-c 断点续传</li><li>-p 下载页面内所有资源，包括图片、视频等</li><li>-r 递归下载</li></ul><h3 id="6-ps-查看系统中的进程状态"><a href="#6-ps-查看系统中的进程状态" class="headerlink" title="6.ps 查看系统中的进程状态"></a>6.ps 查看系统中的进程状态</h3><ul><li><p>-a 显示所有进程</p></li><li><p>-u 用户以及其他详细信息</p></li><li><p>-x 显示没有控制终端的进程</p><img src="/2020/07/18/linux-xue-xi-ji-lu/07/18/linux-xue-xi-ji-lu/image-20200718223032314.png" class title="进程状态"><blockquote><p>Linux 系统中时刻运行着许多进程，如果能够合理地管理它们，则可以优化系统的性能。在</p><p>Linux 系统中，有 5 种常见的进程状态，分别为运行、中断、不可中断、僵死与停止，其各自</p><p>含义如下所示。</p><p>R（运行）：进程正在运行或在运行队列中等待。</p><p>S（中断）：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该</p><p>状态。</p><p>D（不可中断）：进程不响应系统异步信号，即便用 kill 命令也不能将其中断。</p><p>Z（僵死）：进程已经终止，但进程描述符依然存在, 直到父进程调用 wait4()系统函数</p><p>后将进程释放。</p><p>T（停止）：进程收到停止信号后停止运行。</p><p>当执行 ps aux 命令后通常会看到如表 2-7 所示的进程状态，表 2-7 中只是列举了部分输</p><p>出值，而且正常的输出值中不包括中文注释。</p></blockquote></li></ul><h3 id="7-top-动态地监视进程活动与系统负载等信息"><a href="#7-top-动态地监视进程活动与系统负载等信息" class="headerlink" title="7.top 动态地监视进程活动与系统负载等信息"></a>7.top 动态地监视进程活动与系统负载等信息</h3><blockquote><p>top 命令执行结果的前 5 行为系统整体的统计信息，其所代表的含义如下。</p><p>第 1 行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、5</p><p>分钟、15 分钟内的平均值，数值越小意味着负载越低）。 </p><p>第 2 行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程</p><p>数。</p><p>第 3 行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源</p><p>百分比、空闲的资源百分比等。</p><p>注：</p><p>第 3 行中的数据均为 CPU 数据并以百分比格式显示，例如“97.1 id”意味着有 97.1%</p><p>的 CPU 处理器资源处于空闲。</p><p>第 4 行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。</p><p>第 5 行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内存量。</p></blockquote><h3 id="8-pidof-查询某个指定服务进程的-PID-值"><a href="#8-pidof-查询某个指定服务进程的-PID-值" class="headerlink" title="8.pidof 查询某个指定服务进程的 PID 值"></a>8.pidof 查询某个指定服务进程的 PID 值</h3><h3 id="9-Kill-终止某个指定-PID-的服务进程"><a href="#9-Kill-终止某个指定-PID-的服务进程" class="headerlink" title="9.Kill 终止某个指定 PID 的服务进程"></a>9.Kill 终止某个指定 PID 的服务进程</h3><h3 id="10-killall-终止某个指定名称的服务所对应的全部进程"><a href="#10-killall-终止某个指定名称的服务所对应的全部进程" class="headerlink" title="10.killall 终止某个指定名称的服务所对应的全部进程"></a>10.killall 终止某个指定名称的服务所对应的全部进程</h3><h3 id="11-ifconfig"><a href="#11-ifconfig" class="headerlink" title="11.ifconfig"></a>11.ifconfig</h3><h3 id="12-uname-a-于查看系统内核与系统版本等信息"><a href="#12-uname-a-于查看系统内核与系统版本等信息" class="headerlink" title="12.uname -a 于查看系统内核与系统版本等信息"></a>12.uname -a 于查看系统内核与系统版本等信息</h3><ul><li>查看系统版本信息 <code>cat /etc/redhat-release</code></li></ul><h3 id="13-uptime-查看系统的负载信息"><a href="#13-uptime-查看系统的负载信息" class="headerlink" title="13.uptime 查看系统的负载信息"></a>13.uptime 查看系统的负载信息</h3><blockquote><p>它可以显示当前系统时间、系统已运行时间、启用终端数量以</p><p>及平均负载值等信息。平均负载值指的是系统在最近 1 分钟、5 分钟、15 分钟内的压力情</p><p>况（下面加粗的信息部分）；负载值越低越好，尽量不要长期超过 1，在生产环境中不要</p><p>超过 5。</p></blockquote><h3 id="14-free-h-于显示当前系统中内存的使用量信息"><a href="#14-free-h-于显示当前系统中内存的使用量信息" class="headerlink" title="14.free -h 于显示当前系统中内存的使用量信息"></a>14.free -h 于显示当前系统中内存的使用量信息</h3><h3 id="15-who-查看当前登入主机的用户终端信息"><a href="#15-who-查看当前登入主机的用户终端信息" class="headerlink" title="15.who 查看当前登入主机的用户终端信息"></a>15.who 查看当前登入主机的用户终端信息</h3><h3 id="16-last-查看所有系统的登录记录"><a href="#16-last-查看所有系统的登录记录" class="headerlink" title="16.last 查看所有系统的登录记录"></a>16.last 查看所有系统的登录记录</h3><h3 id="17-history-于显示历史执行过的命令"><a href="#17-history-于显示历史执行过的命令" class="headerlink" title="17.history 于显示历史执行过的命令"></a>17.history 于显示历史执行过的命令</h3><h3 id="18-sosreport-收集系统配置及架构信息并输出诊断文档"><a href="#18-sosreport-收集系统配置及架构信息并输出诊断文档" class="headerlink" title="18.sosreport 收集系统配置及架构信息并输出诊断文档"></a>18.sosreport 收集系统配置及架构信息并输出诊断文档</h3><h3 id="19-cat-n-查看内容并打印行号"><a href="#19-cat-n-查看内容并打印行号" class="headerlink" title="19.cat -n 查看内容并打印行号"></a>19.cat -n 查看内容并打印行号</h3><h3 id="20-head-n-20-查看文档的前20行"><a href="#20-head-n-20-查看文档的前20行" class="headerlink" title="20.head -n 20 查看文档的前20行"></a>20.head -n 20 查看文档的前20行</h3><h3 id="21-tail-查看纯文本文档的后-N-行或持续刷新内容"><a href="#21-tail-查看纯文本文档的后-N-行或持续刷新内容" class="headerlink" title="21.tail 查看纯文本文档的后 N 行或持续刷新内容"></a>21.tail 查看纯文本文档的后 N 行或持续刷新内容</h3><h3 id="22-tr-替换文本文件中的字符"><a href="#22-tr-替换文本文件中的字符" class="headerlink" title="22.tr 替换文本文件中的字符"></a>22.tr 替换文本文件中的字符</h3><ul><li><code>cat anaconda-ks.cfg | tr [a-z] [A-Z]</code> 小写转化为大写</li></ul><h3 id="23-wc-统计指定文本的行数、字数、字节数"><a href="#23-wc-统计指定文本的行数、字数、字节数" class="headerlink" title="23.wc 统计指定文本的行数、字数、字节数"></a>23.wc 统计指定文本的行数、字数、字节数</h3><ul><li>-l 只显示行数</li><li>-w 只显示单词数</li><li>-c 只显示字节数</li></ul><h3 id="24-stat-查看文件的具体存储信息和时间等信息"><a href="#24-stat-查看文件的具体存储信息和时间等信息" class="headerlink" title="24.stat 查看文件的具体存储信息和时间等信息"></a>24.stat 查看文件的具体存储信息和时间等信息</h3><h3 id="25-cut-按“列”提取文本字符，格式为“cut-参数-文本”"><a href="#25-cut-按“列”提取文本字符，格式为“cut-参数-文本”" class="headerlink" title="25.cut 按“列”提取文本字符，格式为“cut [参数] 文本”"></a>25.cut 按“列”提取文本字符，格式为“cut [参数] 文本”</h3><ul><li><code>cut -d: -f1 /etc/passwd</code> 提取出 passwd 文件中的用户名信息，即提取以冒号（：）为间隔符号的第一列内容</li></ul><h3 id="26-diff-比较多个文本文件的差异"><a href="#26-diff-比较多个文本文件的差异" class="headerlink" title="26.diff 比较多个文本文件的差异"></a>26.diff 比较多个文本文件的差异</h3><ul><li>diff –brief 命令显示比较后的结果，判断文件是否相同：<code>diff --brief diff_A.txt diff_B.txt</code></li><li>最后使用带有-c 参数的 diff 命令来描述文件内容具体的不同：<code>diff -c diff_A.txt diff_B.txt</code></li></ul><h3 id="27-touch-创建空白文件或设置文件的时间"><a href="#27-touch-创建空白文件或设置文件的时间" class="headerlink" title="27.touch 创建空白文件或设置文件的时间"></a>27.touch 创建空白文件或设置文件的时间</h3><ul><li>-a 仅修改读取时间(atime)</li><li>-m 仅修改修改时间(mtime)</li><li>-d 同时修改atime 和 mtime</li></ul><h3 id="28-cp-复制文件或目录"><a href="#28-cp-复制文件或目录" class="headerlink" title="28.cp 复制文件或目录"></a>28.cp 复制文件或目录</h3><ul><li>-p 保留原始文件的属性</li><li>-d 若对象为“链接文件”，则保留该“链接文件”的属性</li><li>-r 递归持续复制（用于目录）</li><li>-i 若目标文件存在则询问是否覆盖</li><li>-a 相当于-pdr（p、d、r 为上述参数）</li></ul><h3 id="29-dd-按照指定大小和个数的数据块来复制文件的内容"><a href="#29-dd-按照指定大小和个数的数据块来复制文件的内容" class="headerlink" title="29.dd 按照指定大小和个数的数据块来复制文件的内容"></a>29.dd 按照指定大小和个数的数据块来复制文件的内容</h3><ul><li>If 输入的文件名称</li><li>of 输出的文件名称</li><li>bs 设置每个“块”的大小</li><li>count 设置要复制“块”的个数</li><li><code>dd if=/dev/zero of=560_file count=1 bs=560M</code> 从/dev/zero 设备文件中取出一个大小为 560MB 的数据块，然后保存成名为 560_file 的文件</li></ul><h3 id="30-file-查看文件类型"><a href="#30-file-查看文件类型" class="headerlink" title="30.file 查看文件类型"></a>30.file 查看文件类型</h3><h3 id="31-tar-对文件进行打包压缩或者解压"><a href="#31-tar-对文件进行打包压缩或者解压" class="headerlink" title="31.tar 对文件进行打包压缩或者解压"></a>31.tar 对文件进行打包压缩或者解压</h3><ul><li>-c 创建压缩文件</li><li>-x 解开压缩文件</li><li>-t 查看压缩文件的内容</li><li>-z 用Gzip压缩或者解压</li><li>-j 用Bzip2压缩或者解压</li><li>-v 显示压缩或者解压的过程</li><li>-f 目标文件名</li><li>-P 保留原始的权限和属性</li><li>-p 使用绝对路径来压缩</li><li>-C 指定解压到的目录</li></ul><h3 id="32-grep命令在文本中执行关键词搜索"><a href="#32-grep命令在文本中执行关键词搜索" class="headerlink" title="32.grep命令在文本中执行关键词搜索"></a>32.grep命令在文本中执行关键词搜索</h3><ul><li>-b 将可执行文件当作文本文件来搜索</li><li>-c 仅显示找到的行数</li><li>-i 忽略大小写</li><li>-n 显示行号</li><li>-v 反向选择—-仅列出没有关键词的行</li></ul><h3 id="33-find-按照指定条件来查找文件"><a href="#33-find-按照指定条件来查找文件" class="headerlink" title="33.find 按照指定条件来查找文件"></a>33.find 按照指定条件来查找文件</h3><ul><li>-name 匹配名称</li><li>-perm 匹配权限(mode为完全匹配，-mode为包含即可)</li><li>-user 匹配所有者</li><li>-group 匹配所有组</li><li>-mtime -n +n 匹配修改内容的时间(-n 指前n天以内，+n值n天以前)</li><li>-atime 匹配访问文件的时间(-n 指前n天以内，+n值n天以前)</li><li>-ctime 匹配修改文件权限的时间(-n 指前n天以内，+n值n天以前)</li><li>-nouser 匹配无所有者的文件</li><li>-nogroup 匹配无所有组的文件</li><li>-newer f1 !f2 匹配比文件分新但比f2旧的文件</li><li>-type b/d/c/p/l/f 匹配文件类型 （块设备、目录、字符设备、管道、链接文件、文本文件）</li><li>-size 匹配文件的大小 （+50KB 为查找超过 50KB 的文件，而-50KB 为查找小于50KB 的文件）</li><li>-prune 忽略某个目录</li><li>-exec … {} ;后面可跟用于进一步处理搜索结果的命令</li></ul><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; 文件</td><td>将标准输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 2&gt; 文件</td><td>将错误输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 &gt;&gt; 文件</td><td>将标准输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt;&gt; 文件</td><td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 &gt;&gt; 文件 2&gt;&amp;1 或 命令 &amp;&gt;&gt; 文件</td><td>将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）</td></tr><tr><td>命令 &lt; 文件</td><td>将文件作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见分界符才停止</td></tr><tr><td>命令 &lt; 文件 1 &gt; 文件 2</td><td>将文件 1 作为命令的标准输入并将标准输出到文件 2</td></tr></tbody></table><h2 id="管道符号"><a href="#管道符号" class="headerlink" title="管道符号 |"></a>管道符号 |</h2><p>通过把管道符和 passwd 命令的–stdin 参数相结合，我们可以用一条</p><p>命令来完成密码重置操作</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"linuxprobe"</span> <span class="token operator">|</span> <span class="token function">passwd</span> --stdin root</code></pre><h2 id="条件测试-1"><a href="#条件测试-1" class="headerlink" title="条件测试 [ $? == 1 ]"></a>条件测试 [ $? == 1 ]</h2><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>测试文件是否为目录类型</td></tr><tr><td>-e</td><td>测试文件是否存在</td></tr><tr><td>-f</td><td>测试是否是一般文件</td></tr><tr><td>-r</td><td>测试当前用户是否有权限读取</td></tr><tr><td>-w</td><td>测试当前用户是否有权限写入</td></tr><tr><td>-x</td><td>测试当前用户是否有权限执行</td></tr></tbody></table><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> -c 3 -i 0.2 -W 3 <span class="token variable">$1</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null</code></pre><blockquote><p>Linux 系统中的 ping 命令不像 Windows 一样尝试 4 次就结束，因此为</p><p>了避免用户等待时间过长，需要通过-c 参数来规定尝试的次数，并使用-i 参数定义每个数据</p><p>包的发送间隔，以及使用-W 参数定义等待超时时间。</p></blockquote><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong><code>for in done</code></strong> </p><pre class=" language-bash"><code class="language-bash">HLIST<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> ~/ipadds.txt<span class="token variable">)</span></span> <span class="token keyword">for</span> IP <span class="token keyword">in</span> <span class="token variable">$HLIST</span> <span class="token keyword">do</span> <span class="token function">ping</span> -c 3 -i 0.2 -W 3 <span class="token variable">$IP</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$IP</span> is On-line."</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$IP</span> is Off-line."</span> <span class="token keyword">fi</span> <span class="token keyword">done</span></code></pre><p><strong>while do done</strong></p><pre class=" language-bash"><code class="language-bash">PRICE<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $RANDOM % 1000<span class="token variable">)</span></span> TIMES<span class="token operator">=</span>0 <span class="token keyword">echo</span> <span class="token string">"商品实际价格为 0-999 之间，猜猜看是多少？"</span> <span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token keyword">do</span> <span class="token function">read</span> -p <span class="token string">"请输入您猜测的价格数目："</span> INT <span class="token keyword">let</span> TIMES++ <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$INT</span> -eq <span class="token variable">$PRICE</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"恭喜您答对了，实际价格是 <span class="token variable">$PRICE</span>"</span> <span class="token keyword">echo</span> <span class="token string">"您总共猜测了 <span class="token variable">$TIMES</span> 次"</span> <span class="token keyword">exit</span> 0 <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$INT</span> -gt <span class="token variable">$PRICE</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token keyword">echo</span> <span class="token string">"太高了！"</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"太低了！"</span> <span class="token keyword">fi</span> <span class="token keyword">done</span></code></pre><blockquote><p>注释：</p><p>expr 为数学运算，计算数值的时候用expr</p><p>let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。</p></blockquote><p><strong><code>case</code></strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">read</span> -p <span class="token string">"请输入一个字符，并按 Enter 键确认："</span> KEY <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$KEY</span>"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>A-Z<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"您输入的是 字母。"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"您输入的是 数字。"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> *<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"您输入的是 空格、功能键或其他控制字符。"</span> esac</code></pre><h2 id="用户身份与权限"><a href="#用户身份与权限" class="headerlink" title="用户身份与权限"></a>用户身份与权限</h2><h3 id="useradd-创建新的用户"><a href="#useradd-创建新的用户" class="headerlink" title="useradd 创建新的用户"></a>useradd 创建新的用户</h3><ul><li><p>-d 指定用户的家目录（默认为/home/username）</p></li><li><p>-e 账户的到期时间，格式为 YYYY-MM-DD. </p></li><li><p>-u 指定该用户的默认 UID </p></li><li><p>-g 指定一个初始的用户基本组（必须已存在）</p></li><li><p>-G 指定一个或多个扩展用户组</p></li><li><p>-N 不创建与用户同名的基本用户组</p></li><li><p>-s 指定该用户的默认 Shell 解释器</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> -d /home/linux -u 8888 -s /sbin/nologin lstink</code></pre><blockquote><p>请注意/sbin/nologin，它是终端解释器中的一员，与 Bash 解释器有着天壤之别。</p><p>一旦用户的解释器被设置为 nologin，则代表该用户不能登录到系统中</p></blockquote><h3 id="groupadd-创建用户组"><a href="#groupadd-创建用户组" class="headerlink" title="groupadd 创建用户组"></a>groupadd 创建用户组</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> lstink</code></pre><h3 id="usermod-修改用户的属性"><a href="#usermod-修改用户的属性" class="headerlink" title="usermod 修改用户的属性"></a>usermod 修改用户的属性</h3><ul><li><p>-c 填写用户账户的备注信息</p></li><li><p>-d -m 参数-m 与参数-d 连用，可重新指定用户的家目录并自动把旧的数据转移过去</p></li><li><p>-e 账户的到期时间，格式为 YYYY-MM-DD </p></li><li><p>-g 变更所属用户组</p></li><li><p>-G 变更扩展用户组</p></li><li><p>-L 锁定用户禁止其登录系统</p></li><li><p>-U 解锁用户，允许其登录系统</p></li><li><p>-s 变更默认终端</p></li><li><p>-u 修改用户的 UID </p></li></ul><h3 id="passwd-修改用户密码"><a href="#passwd-修改用户密码" class="headerlink" title="passwd 修改用户密码"></a>passwd 修改用户密码</h3><ul><li><p>-l 锁定用户，禁止其登录</p></li><li><p>-u 解除锁定，允许用户登录</p></li><li><p>–stdin 允许通过标准输入修改用户密码，如echo “NewPassWord” | passwd –stdin Username </p></li><li><p>-d 使该用户可用空密码登录系统</p></li><li><p>-e 强制用户在下次登录时修改密码</p></li><li><p>-S 显示用户的密码是否被锁定，以及密码所采用的加密算法名称</p></li></ul><h3 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel 删除用户"></a>userdel 删除用户</h3><ul><li><p>-f 强制删除用户</p></li><li><p>-r 同时删除用户及用户家目录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下配置环境变量的意义和方法</title>
      <link href="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/"/>
      <url>/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-10-配置环境变量的方法"><a href="#windows-10-配置环境变量的方法" class="headerlink" title="windows 10 配置环境变量的方法"></a>windows 10 配置环境变量的方法</h1><h2 id="1-首先我们来说一下环境变量是什么"><a href="#1-首先我们来说一下环境变量是什么" class="headerlink" title="1. 首先我们来说一下环境变量是什么?"></a>1. 首先我们来说一下环境变量是什么?</h2><p>  每一次系统的启动，都会读取各个启动文件中配置的变量，通过这些变量它才能准确的找到每一个应用程序和命令所对应的存储位置，找到存储位置之后，它就可以启动程序了。</p><p>拿linux来说,敲击cd命令，他就会去系统变量中查找，比如找到目录/usr/bin下存在cd文件或者文件的链接(相当于windows下的快捷方式)，根据链接的目录找到运行cd命令的脚本，执行脚本，于是就完成了一次命令的执行。</p><p>  windows下的命令一般会去寻找可执行文件的目录,比如敲击<code>php</code>则会去环境变量的所有目录下去寻找php.exe的这个文件，找到就执行这个文件。</p><blockquote><p>用户敲击的每一个命令，系统都会在环境变量中定义的目录中去寻找，如果找到了就执行该命令，找不到就会提示 command not foound （命令未找到）</p></blockquote><h2 id="2-windows-10下环境变量的配置"><a href="#2-windows-10下环境变量的配置" class="headerlink" title="2.windows 10下环境变量的配置"></a>2.windows 10下环境变量的配置</h2><ul><li><p>右键<code>此电脑</code> -&gt; <code>属性</code></p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709142203252-4280053.png" class title="属性"></li><li><p>点击<code>高级系统设置</code></p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709142457494.png" class title="高级系统设置"></li><li><p>点击<code>环境变量</code></p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709142604474.png" class title="环境变量"></li><li><p>此时可以看见环境变量分为两个部分，上面是用户变量，下面是系统变量</p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709142830739.png" class title="环境变量区分"><blockquote><p>这里说一下用户变量和系统变量的区别：</p><p>用户变量：我们都知道，linux系统是可以支持多用户登录的，多个用户可以同时登录一台电脑，那么，windows系统当然也是，当你的系统创建了一个别的用户，那么你的用户变量指的就是你当前登录账户的变量，只针对你当前登录的用户生效。其它用户登录是不生效的。</p><p>系统变量：针对于系统，不管是谁登录，都生效。</p></blockquote></li><li><p>一般来说我们配置<code>path</code>这个变量就可以了，如果配置java或者是其它的，请参考官方文档进行配置。这里示例php变量的配置</p></li><li><p>首先找到php的安装目录，然后复制目录的地址</p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709145939445.png" class title="php安装目录"></li><li><p>实际上运行的命令 php就是执行php.exe文件，因此复制这个文件所在的目录，粘贴到环境变量的<code>path</code>里面</p><img src="/2020/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/07/09/windows-xia-pei-zhi-huan-jing-bian-liang-de-yi-yi-he-fang-fa/image-20200709150142339.png" class title="设置变量"></li><li><p>这时候点击确定就行了</p><blockquote><p>注意： 设置完环境变量一定要重新打开cmd，否则无法加载刚刚配置的环境变量温柔问题。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付库的使用</title>
      <link href="/2020/05/22/zhi-fu-ku-de-shi-yong/"/>
      <url>/2020/05/22/zhi-fu-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h1><h3 id="1-引入支付库-yansonda-pay"><a href="#1-引入支付库-yansonda-pay" class="headerlink" title="1.引入支付库 yansonda/pay"></a>1.引入支付库 <code>yansonda/pay</code></h3><p><code>yansongda/pay</code> 这个库封装了支付宝和微信支付的接口，通过这个库我们就不需要去关注不同支付平台的接口差异，使用相同的方法、参数来完成支付功能，节省开发时间。</p><blockquote><p>本文使用laravel框架演示</p></blockquote><p>首先通过 <code>composer</code> 引入这个包：</p><pre><code>composer require yansongda/pay</code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>创建一个新的配置文件来保存支付所需的参数：</p><pre><code>touch config/pay.php</code></pre><p>配置内容为：</p><pre><code>&lt;?phpreturn [    &#39;alipay&#39; =&gt; [        &#39;app_id&#39;         =&gt; &#39;&#39;,        &#39;ali_public_key&#39; =&gt; &#39;&#39;,        &#39;private_key&#39;    =&gt; &#39;&#39;,        &#39;log&#39;            =&gt; [            &#39;file&#39; =&gt; storage_path(&#39;logs/alipay.log&#39;),        ],    ],    &#39;wechat&#39; =&gt; [        &#39;app_id&#39;      =&gt; &#39;&#39;,        &#39;mch_id&#39;      =&gt; &#39;&#39;,        &#39;key&#39;         =&gt; &#39;&#39;,        &#39;cert_client&#39; =&gt; &#39;&#39;,        &#39;cert_key&#39;    =&gt; &#39;&#39;,        &#39;log&#39;         =&gt; [            &#39;file&#39; =&gt; storage_path(&#39;logs/wechat_pay.log&#39;),        ],    ],];</code></pre><p><strong>请自行填写配置内容</strong></p><blockquote><p>‘app_id’ =&gt; ‘你在支付宝沙箱看到的appid’, </p><p>‘ali_public_key’ =&gt; ‘支付宝沙箱显示的公钥’, </p><p>‘private_key’ =&gt; ‘刚刚生成的私钥’,</p></blockquote><h3 id="3-集成支付宝支付"><a href="#3-集成支付宝支付" class="headerlink" title="3.集成支付宝支付"></a>3.集成支付宝支付</h3><p>使用支付宝沙箱环境测试 <a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>登录后设置沙箱的密钥：</p><img src="/2020/05/22/zhi-fu-ku-de-shi-yong/05/22/zhi-fu-ku-de-shi-yong/image-20200522172641168.png" class title="支付宝沙箱"><p>设置应用公钥，具体步骤参考支付宝文档： <a href="https://opendocs.alipay.com/open/291/105971" target="_blank" rel="noopener">https://opendocs.alipay.com/open/291/105971</a></p><h3 id="4-容器"><a href="#4-容器" class="headerlink" title="4.容器"></a>4.容器</h3><p>容器是现代 PHP 开发的一个重要概念，Laravel 就是在容器的基础上构建的。我们将支付操作类实例注入到容器中，在以后的代码里就可以直接通过 <code>app(&#39;alipay&#39;)</code> 来取得对应的实例，而不需要每次都重新创建。</p><p>我们通常在 <code>AppServiceProvider</code> 的 <code>register()</code> 方法中往容器中注入实例：</p><p><em>app/Providers/AppServiceProvider.php</em></p><pre><code>use Monolog\Logger;use Yansongda\Pay\Pay;...    public function register()    {        // 往服务容器中注入一个名为 alipay 的单例对象        $this-&gt;app-&gt;singleton(&#39;alipay&#39;, function () {            $config = config(&#39;pay.alipay&#39;);            // 判断当前项目运行环境是否为线上环境            if (app()-&gt;environment() !== &#39;production&#39;) {                $config[&#39;mode&#39;]         = &#39;dev&#39;;                $config[&#39;log&#39;][&#39;level&#39;] = Logger::DEBUG;            } else {                $config[&#39;log&#39;][&#39;level&#39;] = Logger::WARNING;            }            // 调用 Yansongda\Pay 来创建一个支付宝支付对象            return Pay::alipay($config);        });        $this-&gt;app-&gt;singleton(&#39;wechat_pay&#39;, function () {            $config = config(&#39;pay.wechat&#39;);            if (app()-&gt;environment() !== &#39;production&#39;) {                $config[&#39;log&#39;][&#39;level&#39;] = Logger::DEBUG;            } else {                $config[&#39;log&#39;][&#39;level&#39;] = Logger::WARNING;            }            // 调用 Yansongda\Pay 来创建一个微信支付对象            return Pay::wechat($config);        });    }</code></pre><blockquote><p>代码解析：</p><ul><li><code>$this-&gt;app-&gt;singleton()</code> 往服务容器中注入一个单例对象，第一次从容器中取对象时会调用回调函数来生成对应的对象并保存到容器中，之后再去取的时候直接将容器中的对象返回。</li><li><code>app()-&gt;environment()</code> 获取当前运行的环境，线上环境会返回 <code>production</code>。对于支付宝，如果项目运行环境不是线上环境，则启用开发模式，并且将日志级别设置为 <code>DEBUG</code>。由于微信支付没有开发模式，所以仅仅将日志级别设置为 <code>DEBUG</code>。</li></ul></blockquote><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><p>接下来我们来测试一下刚刚注入到容器中的实例，进入 tinker：</p><pre><code>php artisan tinker</code></pre><p>然后分别输入 <code>app(&#39;alipay&#39;)</code> 和 <code>app(&#39;wechat_pay&#39;)</code></p><pre><code>&gt;&gt;&gt; app(&#39;alipay&#39;)&gt;&gt;&gt; app(&#39;wechat_pay&#39;)</code></pre><img src="/2020/05/22/zhi-fu-ku-de-shi-yong/05/22/zhi-fu-ku-de-shi-yong/image-20200522182124016.png" class title="成功"><h3 id="6-调用"><a href="#6-调用" class="headerlink" title="6.调用"></a>6.调用</h3><pre><code>// 调用支付宝的网页支付return app(&#39;alipay&#39;)-&gt;web([     &#39;out_trade_no&#39; =&gt; $order-&gt;no, // 订单编号，需保证在商户端不重复     &#39;total_amount&#39; =&gt; $order-&gt;total_amount, // 订单金额，单位元，支持小数点后两位     &#39;subject&#39;      =&gt; &#39;支付 Laravel Shop 的订单：&#39;.$order-&gt;no, // 订单标题]);</code></pre><h2 id="微信支付需要商家资质-，以后再说"><a href="#微信支付需要商家资质-，以后再说" class="headerlink" title="微信支付需要商家资质 ，以后再说"></a>微信支付需要商家资质 ，以后再说</h2>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel创建延时任务</title>
      <link href="/2020/05/22/laravel-chuang-jian-yan-shi-ren-wu/"/>
      <url>/2020/05/22/laravel-chuang-jian-yan-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel创建延时任务"><a href="#Laravel创建延时任务" class="headerlink" title="Laravel创建延时任务"></a>Laravel创建延时任务</h1><h3 id="1-创建任务"><a href="#1-创建任务" class="headerlink" title="1.创建任务"></a>1.创建任务</h3><p>我们通过 <code>make:job</code> 命令来创建一个任务：</p><pre><code>php artisan make:job CloseOrder</code></pre><p>创建的任务类保存在 <code>app/Jobs</code> 目录下，现在编辑刚刚创建的任务类：</p><p><em>app/Jobs/CloseOrder.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Jobs</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Queueable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>SerializesModels</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>InteractsWithQueue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Queue<span class="token punctuation">\</span>ShouldQueue</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Bus<span class="token punctuation">\</span>Dispatchable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Models<span class="token punctuation">\</span>Order</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代表这个类需要被放到队列中执行，而不是触发时立即执行</span><span class="token keyword">class</span> <span class="token class-name">CloseOrder</span> <span class="token keyword">implements</span> <span class="token class-name">ShouldQueue</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Dispatchable</span><span class="token punctuation">,</span> InteractsWithQueue<span class="token punctuation">,</span> Queueable<span class="token punctuation">,</span> SerializesModels<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$order</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Order <span class="token variable">$order</span><span class="token punctuation">,</span> <span class="token variable">$delay</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置延迟的时间，delay() 方法的参数代表多少秒之后执行</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token variable">$delay</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义这个任务类具体的执行逻辑</span>    <span class="token comment" spellcheck="true">// 当队列处理器从队列中取出任务时，会调用 handle() 方法</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断对应的订单是否已经被支付</span>        <span class="token comment" spellcheck="true">// 如果已经支付则不需要关闭订单，直接退出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">paid_at</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 通过事务执行 sql</span>        \<span class="token package">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将订单的 closed 字段标记为 true，即关闭订单</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'closed'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环遍历订单中的商品 SKU，将订单中的数量加回到 SKU 的库存中去</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">order</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">productSku</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addStock</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">amount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-触发任务"><a href="#2-触发任务" class="headerlink" title="2.触发任务"></a>2.触发任务</h3><pre><code>$this-&gt;dispatch(new CloseOrder($order, 60));</code></pre><blockquote><p>默认情况下，Laravel 生成的 <code>.env</code> 文件里把队列的驱动设置成了 <code>sync</code>（同步），在同步模式下延迟任务会被立即执行，所以需要先把队列的驱动改成 <code>redis</code>：</p></blockquote><pre><code>QUEUE_CONNECTION=redis</code></pre><p>接下来启动队列处理器：</p><pre><code>php artisan queue:work</code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>photoshop修改照片为指定尺寸和像素</title>
      <link href="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/"/>
      <url>/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/</url>
      
        <content type="html"><![CDATA[<h1 id="PhotoShop修改图片为指定像素或者尺寸"><a href="#PhotoShop修改图片为指定像素或者尺寸" class="headerlink" title="PhotoShop修改图片为指定像素或者尺寸"></a>PhotoShop修改图片为指定像素或者尺寸</h1><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><blockquote><p>指定宽为390像素，高为567像素，分辨率调整为300像素。图片格式为 JPG</p></blockquote><h3 id="1-打开要修改的图片"><a href="#1-打开要修改的图片" class="headerlink" title="1.打开要修改的图片"></a>1.打开要修改的图片</h3><p>菜单栏点击<code>文件</code> 、<code>打开</code>：</p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200524171821674.png" class title="打开图片"><p>然后选择你的图片：</p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521115145443.png" class title="双击背景转化为图层"><h3 id="2-双击背景，转化为图层，点击确定。"><a href="#2-双击背景，转化为图层，点击确定。" class="headerlink" title="2.双击背景，转化为图层，点击确定。"></a>2.双击背景，转化为图层，点击<code>确定</code>。</h3><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521115306460.png" class title="图层"><h3 id="3-点击菜单栏图像，图像大小"><a href="#3-点击菜单栏图像，图像大小" class="headerlink" title="3.点击菜单栏图像，图像大小"></a>3.点击菜单栏<code>图像</code>，图像大小</h3><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521115435958.png" class title="调整图像大小"><p>*<em>或者使用快捷键  <code>ctrl+alt+I</code>同样可以打开 <code>图像大小</code> *</em></p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521115957240.png" class title="图像大小调整"><blockquote><p>上图中的1，2，3标记解释：</p><p>1：这个小标记是联动的意思，默认勾选，就是你修改宽度和高度的时候，它是等比例缩放，不会因为调整图片大小导致图片失真。如果取消勾选，修改宽度和高度，会导致图片拉伸，图片失真。</p><p>2：调整图片高度和宽度，后面的单位可以选择，根据实际情况调整。</p><p>3：分辨路调整，默认为72，因为大于72像素的分辨率一般在屏幕上显示，人的肉眼已经无法分辨了，所以默认72就够了，但是由于打印需要，可能有的需要更高的分辨率，比如300以上。</p></blockquote><h3 id="4-调整图片"><a href="#4-调整图片" class="headerlink" title="4.调整图片"></a>4.调整图片</h3><ul><li>分辨率直接修改为指定的 300 像素</li><li>调整宽高</li></ul><p>调整宽度为390像素之后，看高度自动变成多少。如果高度不够想要调整的567像素，那么就先调整高度，如果大于567像素，那就直接确定即可。</p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521121213926.png" class title="调整"><blockquote><p>390 x 567 像素，现在是390 x 693，宽度匹配，高度还有点大，这时候使用<code>裁剪工具</code>继续调整。</p></blockquote><h3 id="5-裁剪图片"><a href="#5-裁剪图片" class="headerlink" title="5.裁剪图片"></a>5.裁剪图片</h3><p>点击左侧工具栏，<code>裁剪工具</code>，或者英文输入法状态下按快捷键<code>C</code></p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521121543640.png" class title="裁剪工具"><blockquote><p>此时如果图片太小，不易操作，可以按住键盘上的<code>alt</code>键，滚动鼠标滚轮，放大或者缩小图片到合适的大小。以便裁剪。</p></blockquote><p><strong>在这里输入指定的宽高</strong></p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521122152085.png" class title="指定宽高"><p>调整你要裁剪的位置，鼠标拖动图片即可。</p><blockquote><p>裁剪状态下，鼠标状态为剪刀状，如果想拖动裁剪区域，鼠标在裁剪区域外单击一下，鼠标变为剪头状，这时候就可以拖动图片了，在裁剪网格内拖动，拖动合适后，网格内双击鼠标就会裁剪完成。</p></blockquote><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521122356360.png" class title="裁剪"><p><strong>裁剪结果：</strong></p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521123038695.png" class title="裁剪结果"><h3 id="6-保存图片"><a href="#6-保存图片" class="headerlink" title="6.保存图片"></a>6.保存图片</h3><p>单击菜单栏，<code>文件</code> &gt;<code>存储为</code>，或者快捷键 <code>ctrl+shift+S</code></p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521123145590.png" class title="存储图片"><p>选择格式为<code>jpeg</code>，点击<code>存储</code>即可：</p><img src="/2020/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/05/21/photoshop-xiu-gai-zhao-pian-wei-zhi-ding-chi-cun-he-xiang-su/image-20200521123431761.png" class title="完成"><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote><p>请右键保存的图片，属性，自行查看图片是否符合要求。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Photoshop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统搭建nginx/Apache+php+mysql以及工具的安装</title>
      <link href="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/"/>
      <url>/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="windows系统搭建nginx-Apache-php-mysql以及工具的安装"><a href="#windows系统搭建nginx-Apache-php-mysql以及工具的安装" class="headerlink" title="windows系统搭建nginx/Apache+php+mysql以及工具的安装"></a>windows系统搭建nginx/Apache+php+mysql以及工具的安装</h1><p>用到的工具：</p><p>百度云链接：</p><p>链接:链接: <a href="https://pan.baidu.com/s/1WbNo--guhps20vuPE5qUSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1WbNo--guhps20vuPE5qUSw</a>  密码: 6h0w</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521165904227.png" class title="百度网盘"><h3 id="1-下载chrom浏览器"><a href="#1-下载chrom浏览器" class="headerlink" title="1.下载chrom浏览器"></a>1.下载chrom浏览器</h3><p>官网地址：<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.cn/intl/zh-CN/chrome/</a></p><p>下载完成后，运行安装即可。</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520173437133.png" class title="下载chrom浏览器"><h3 id="2-下载phpstudy-v8"><a href="#2-下载phpstudy-v8" class="headerlink" title="2.下载phpstudy v8"></a>2.下载phpstudy v8</h3><p>官网地址：<a href="https://www.xp.cn/download.html" target="_blank" rel="noopener">https://www.xp.cn/download.html</a></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520171948951.png" class title="选择下载phpstudy"><p>选择 <code>64位</code> 还是 <code>32位</code> ，根据你windows的操作系统来选择，一般现在的电脑都是64位的操作系统。</p><p>如果你不确定，请随便打开一个文件夹，然后右键 <code>此电脑</code>，点击<code>属性</code>：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520172635029.png" class title="属性"><p>然后这里就会显示:</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520172739068.png" class title="系统属性"><p>这就是64位的操作系统。</p><h3 id="2-安装phpstudy-v8"><a href="#2-安装phpstudy-v8" class="headerlink" title="2.安装phpstudy v8"></a>2.安装phpstudy v8</h3><p>下载下来的文件默认是一个<code>.zip</code>后缀的压缩文件，解压后安装即可，默认安装到D盘。</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520173757131.png" class title="phpstudy安装包"><p>点击安装即可：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520174110576.png" class title="phpstudy面板"><p>点击 <code>环境</code> ，安装<code>redis</code> 和 <code>composer</code>：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520175436385.png" class title="安装redis，composer"><blockquote><p>这时候redis和composer只是安装到电脑上了，并没有配置，因此在命令行输入 <code>redis-cli</code>或者是<code>composer</code>会提示命令不存在。</p></blockquote><h3 id="3-配置composer和php的环境变量"><a href="#3-配置composer和php的环境变量" class="headerlink" title="3.配置composer和php的环境变量"></a>3.配置composer和php的环境变量</h3><p>打开phpstudy的安装目录，<code>D:\phpstudy_pro\Extensions\composer1.8.5</code></p><blockquote><p>我的是安装到了C盘，因为我是用虚拟机装的，因此我没有D盘，所以就安装到了C盘，你的如果没有修改安装目录的话，那么你的就是D盘。</p></blockquote><p><strong>复制目录</strong></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520180822510.png" class title="image-20200520180822510"><blockquote><p>这就是composer文件所在目录，平常我们运行的composer命令就是执行这里面的composer文件。</p></blockquote><p>如果你的文件都不显示后缀，请打开显示 <code>文件扩展名</code> 选项</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520181059903.png" class title="显示文件后缀名"><p>复制完目录后，左下角搜索 <code>环境变量</code>，上面会提示 <code>编辑系统环境变量</code>，点击打开：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520181432162.png" class title="打开环境变量"><p>环境变量分两种，上面的是用户变量，下面的是系统变量</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520182112609.png" class title="系统变量"><blockquote><p>解释：</p><p>用户变量：用户变量配置的内容，只有当前登录系统账户的这个用户有效。比如你设置一个用户变量之后，新建一个账户，用新建的账户登录系统，那么你新建的这个账号就使用不了之前的这个用户变量，</p><p>系统变量：系统变量的内容是针对这个操作系统的，不管是哪一个用户登录系统，这个变量都有效。</p></blockquote><p>我配置的是系统变量，双击path,弹出新窗口，里面列出了系统自带的环境变量，然后点击右上角的<code>新建</code>，粘贴上之前复制的路径。此时页面不要关闭，继续复制php的目录，粘贴过来。</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520182223040.png" class title="image-20200520182223040"><p>你的php的目录应该是：<code>D:\phpstudy_pro\Extensions\php\php7.3.4nts</code></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520182808546.png" class title="环境变量配置完成"><p>打开<code>cmd</code>验证环境变量是否配置成功。</p><p>左下角搜索cmd,打开 输入<code>php -v</code>,然后再输入<code>composer</code>：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520183131813.png" class title="有提示则代表成功"><p>启动环境：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200520183745506.png" class title="image-20200520183745506"><h3 id="4-配置redis"><a href="#4-配置redis" class="headerlink" title="4.配置redis"></a>4.配置redis</h3><p>cmd中切换到redis的安装目录：</p><p><code>cd D:\phpstudy_pro\Extensions\redis3.0.504</code></p><p>然后安装redis到系统服务中：</p><p><code>redis-server --service-install redis.windows.conf</code></p><p>这时候关闭cmd再打开：</p><p><code>redis-cli</code></p><p>显示：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521133250767.png" class title="image-20200521133250767"><p>这是因为redis-cli没有加入环境变量，同样加入按照以上方法加入：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521133436048.png" class title="redis加入环境变量"><p>确定之后，关闭cmd,再重新打开，输入<code>redis-cli</code>：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521133603378.png" class title="redis配置成功"><h3 id="5-Git的安装"><a href="#5-Git的安装" class="headerlink" title="5.Git的安装"></a>5.Git的安装</h3><p>请使用上面提供的百度云链接中的git安装包，安装git即可。</p><h3 id="6-phpstorm安装"><a href="#6-phpstorm安装" class="headerlink" title="6.phpstorm安装"></a>6.phpstorm安装</h3><p>官网下载地址：这个地址下载速度较快</p><p><a href="https://download.jetbrains.8686c.com/webide/PhpStorm-2020.1.exe" target="_blank" rel="noopener">https://download.jetbrains.8686c.com/webide/PhpStorm-2020.1.exe</a></p><p>下载完成之后点击安装即可。</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521135441131.png" class title="安装"><p>一直点击<code>next</code>,直到安装成功。</p><p>打开phpstorm</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521135641506.png" class title="同意"><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521135743122.png" class title="Dont&#96;t send"><p><strong>跳过，使用默认设置</strong></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521135917032.png" class title="跳过，使用默认设置"><p><strong>选择试用30天</strong></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521140019866.png" class title="试用30天"><h3 id="7-phpstorm永久激活"><a href="#7-phpstorm永久激活" class="headerlink" title="7.phpstorm永久激活"></a>7.phpstorm永久激活</h3><p>把本文开头提供的百度云下载内容放到一个位置，以后不要移动或者删除这个文件<code>jetbrains-agent.jar</code></p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521140528729.png" class title="拖动文件"><p>点击重启</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521140602391.png" class title="重启编辑器"><p>点击<code>为phpstorm安装</code>，然后选择<code>是</code>：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521140703741.png" class title="安装"><p><strong>破解完成</strong></p><h3 id="8-phpstorm汉化"><a href="#8-phpstorm汉化" class="headerlink" title="8.phpstorm汉化"></a>8.phpstorm汉化</h3><p>右键phpstorm图标，<code>打开文件所在位置</code>:</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521140852526.png" class title="打开文件所在位置"><p>点击地址栏，进入到上一级，然后点击<code>lib</code>,把汉化包放到这个目录：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521141139335.png" class title="汉化"><p><strong>重新打开编辑器，汉化完成</strong></p><h3 id="9-安装navicat管理数据库"><a href="#9-安装navicat管理数据库" class="headerlink" title="9.安装navicat管理数据库"></a>9.安装navicat管理数据库</h3><p>百度网盘下载的，可以直接安装，这里主要介绍注册机的使用。</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521173755225.png" class title="注册机"><ol><li><p>点击patch,如果弹出：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174007191.png" class title="image-20200521174007191"></li></ol><p>说明它自动找到对应的文件了，只需操作下一步即可。</p><p>如果没有，说明需要你手动选择：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174136395.png" class title="右键打开文件所在位置"><p>复制地址栏：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174340922.png" class title="复制地址栏"><p>粘贴到Patch弹出的路径中，选择<img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174438971.png" class title="image-20200521174438971"></p><p>确认即可。</p><p>然后点击图中标记 ，生成序列号：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174646593.png" class title="生成序列号"><p>复制序列号，打开navicat，点击注册，粘贴进去,点击激活：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174838169.png" class title="激活"><p>选择手动激活：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521174927906.png" class title="手动激活"><p>复制请求码：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521175030296.png" class title="复制请求码"><p>粘贴过去之后，点击generate生成激活码，点击激活即可：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521175456826.png" class title="激活"><p><strong>激活完成</strong></p><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><p>利用phpstudy v8搭建一个laravel框架的网站。</p><h3 id="1-利用composer下载一个laravel框架"><a href="#1-利用composer下载一个laravel框架" class="headerlink" title="1.利用composer下载一个laravel框架"></a>1.利用composer下载一个laravel框架</h3><p>composer设置阿里云镜像，提高下载速度</p><p><code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code></p><p>下载laravel框架：</p><p><code>composer create-project --prefer-dist laravel/laravel laravel</code></p><h3 id="2-利用phpstudy创建网站："><a href="#2-利用phpstudy创建网站：" class="headerlink" title="2.利用phpstudy创建网站："></a>2.利用phpstudy创建网站：</h3><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521180747726.png" class title="创建网站"><p>这时候会因为权限的问题，hosts文件并没有写入成功，所有需要我们修改hosts文件的权限，让phpstudy可以写入，具体如下：</p><p>找到hosts文件，<code>C:\Windows\System32\drivers\etc</code>,右键属性，点击安全，点击编辑：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521182523966.png" class title="修改权限"><p>选中完全控制，点击应用，再点击确定</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521182650234.png" class title="完全控制"><p>再修改自己账户的权限，同样的操作：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521182743702.png" class title="image-20200521182743702"><p>然后phpstudy就可以写入路由了，但是刚刚我们创建的网站它没有写入，我们手动来添加一下：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521183227589.png" class title="添加路由"><p>浏览器访问地址：laravel.test</p><blockquote><p>这时候还是只能访问网站的首页，因为还需要部署laravel的nginx重写规则</p></blockquote><h3 id="配置laravel的重写规则："><a href="#配置laravel的重写规则：" class="headerlink" title="配置laravel的重写规则："></a>配置laravel的重写规则：</h3><p>打开网站，点击管理，伪静态：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521183608473.png" class title="image-20200521183608473"><p>在里面写上以下代码：</p><pre><code>location / {        try_files $uri $uri/ /index.php?$query_string;    }</code></pre><p>点击确认即可：</p><img src="/2020/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/05/20/windows-xi-tong-da-jian-nginx-apache-php-mysql-yi-ji-gong-ju-de-an-zhuang/image-20200521183801737.png" class title="伪静态"><p>浏览器访问正常。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>]]></content>
      
      
      <categories>
          
          <category> windows10 </category>
          
          <category> phpstudy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8.0使用laravel框架报错问题</title>
      <link href="/2020/05/18/mysql8-0-shi-yong-laravel-kuang-jia-bao-cuo-wen-ti/"/>
      <url>/2020/05/18/mysql8-0-shi-yong-laravel-kuang-jia-bao-cuo-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="使用laravel-mysql8-0-报错"><a href="#使用laravel-mysql8-0-报错" class="headerlink" title="使用laravel + mysql8.0 报错"></a>使用laravel + mysql8.0 报错</h2><blockquote><p>SQLSTATE[HY000] [2054] The server requested authentication method unknown to the client</p></blockquote><p>由于mysql8.0采用了新的密码策略，导致框架不兼容</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="1-修改mysql配置文件-my-cnf"><a href="#1-修改mysql配置文件-my-cnf" class="headerlink" title="1.修改mysql配置文件 my.cnf"></a>1.修改mysql配置文件 my.cnf</h3><p>添加下面一行:</p><pre><code>[mysqld]default_authentication_plugin= mysql_native_password</code></pre><p><strong>重启数据库</strong></p><h3 id="2-重置数据库密码"><a href="#2-重置数据库密码" class="headerlink" title="2.重置数据库密码"></a>2.重置数据库密码</h3><pre class=" language-bash"><code class="language-bash">ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'你的密码'</span><span class="token punctuation">;</span></code></pre><blockquote><p>如果遇到这个问题 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements，请参考以下步骤：</p></blockquote><h3 id="查看密码策略"><a href="#查看密码策略" class="headerlink" title="查看密码策略"></a>查看密码策略</h3><pre><code>SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code></pre><img src="/2020/05/18/mysql8-0-shi-yong-laravel-kuang-jia-bao-cuo-wen-ti/05/18/mysql8-0-shi-yong-laravel-kuang-jia-bao-cuo-wen-ti/image-20200518192124341.png" class title="查看密码策略"><p>你的可能是 MEDIUM,这时候你需要执行：</p><pre><code>set global validate_password.policy=LOW</code></pre><p>把密码策略改为低级，这样数据库就不会要求你的密码复杂性了。</p><p>如果你需要设置四位数的密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> global validate_password.length<span class="token operator">=</span>4<span class="token punctuation">;</span></code></pre><p>然后再重置密码就可以了：</p><pre><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql8.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成ssh key</title>
      <link href="/2020/05/17/sheng-cheng-ssh-key/"/>
      <url>/2020/05/17/sheng-cheng-ssh-key/</url>
      
        <content type="html"><![CDATA[<h1 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h1><h3 id="打开命令行"><a href="#打开命令行" class="headerlink" title="打开命令行"></a>打开命令行</h3><p><strong>创建ssh key</strong></p><pre class=" language-ssh"><code class="language-ssh">ssh-keygen -t rsa -C "1318385889@qq.com"</code></pre><p>请自行换成你自己的邮箱</p><p>然后一路回车确认，直到结束</p><h3 id="生成的密钥在哪里？"><a href="#生成的密钥在哪里？" class="headerlink" title="生成的密钥在哪里？"></a>生成的密钥在哪里？</h3><pre><code>cd ~/.ssh/</code></pre><p>生成的<code>id_rsa</code>和<code>id_rsa.pub</code>就在这个目录中</p><p>打开 <code>~/.ssh/id_rsa.pub</code>，这个文件内的内容就是你需要的密钥</p><p>复制该密钥，然后保存到你的github上即可。</p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel的异常处理机制</title>
      <link href="/2020/05/17/laravel-de-yi-chang-chu-li-ji-zhi/"/>
      <url>/2020/05/17/laravel-de-yi-chang-chu-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel的异常处理"><a href="#Laravel的异常处理" class="headerlink" title="Laravel的异常处理"></a>Laravel的异常处理</h1><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常指的是在程序运行过程中发生的异常事件，通常是由外部问题所导致的。</p><p>异常处理是程序开发中经常遇到的任务，如何优雅地处理异常，从一定程度上反映了你的程序是否足够严谨。</p><p>在下面的介绍中，我们将异常大致分为 <strong>用户异常</strong> 和 <strong>系统异常</strong>，接下来我们将分别对其讲解和代码实现。</p><h2 id="1-用户错误行为触发的异常"><a href="#1-用户错误行为触发的异常" class="headerlink" title="1. 用户错误行为触发的异常"></a>1. 用户错误行为触发的异常</h2><p>比如访问一个被下架的商品时触发的异常，对于此类异常我们需要把触发异常的原因告知用户。</p><p>我们把这类异常命名为 <code>InvalidRequestException</code>，可以通过 <code>make:exception</code> 命令来创建：</p><pre class=" language-bash"><code class="language-bash">php artisan make:exception InvalidRequestException</code></pre><p>新创建的异常文件保存在 <code>app/Exceptions/</code> 目录下：</p><p><em>app/Exceptions/InvalidRequestException.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InvalidRequestException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>string <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> int <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">expectsJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// json() 方法第二个参数就是 Http 返回码</span>            <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">message</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'pages.error'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'msg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">message</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Laravel 5.5 之后支持在异常类中定义 <code>render()</code> 方法，该异常被触发时系统会调用 <code>render()</code> 方法来输出，我们在 <code>render()</code> 里判断如果是 AJAX 请求则返回 JSON 格式的数据，否则就返回一个错误页面。</p><p>错误页面由你自己创建。</p><blockquote><p>当异常触发时 Laravel 默认会把异常的信息和调用栈打印到日志里,在storage/logs/laravel.log里面。当你接管了这个异常的时候，就不需要再记录这个错误信息，所以你可以去屏蔽这个行为。</p></blockquote><p>Laravel 内置了屏蔽指定异常写日志的解决方案：</p><p><em>app/Exceptions/Handler.php</em></p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token variable">$dontReport</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    InvalidRequestException<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>当一个异常被触发时，Laravel 会去检查这个异常的类型是否在 <code>$dontReport</code> 属性中定义了，如果有则不会打印到日志文件中。</p><h2 id="2-系统内部异常"><a href="#2-系统内部异常" class="headerlink" title="2. 系统内部异常"></a>2. 系统内部异常</h2><p>比如连接数据库失败，对于此类异常我们需要有限度地告知用户发生了什么，但又不能把所有信息都暴露给用户（比如连接数据库失败的信息里会包含数据库地址和账号密码），因此我们需要传入两条信息，一条是给用户看的，另一条是打印到日志中给开发人员看的。</p><p>新建一个 <code>InternalException</code> 类：</p><pre class=" language-bash"><code class="language-bash">php artisan make:exception InternalException</code></pre><p><em>app/Exceptions/InternalException.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Exception</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InternalException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$msgForUser</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>string <span class="token variable">$message</span><span class="token punctuation">,</span> string <span class="token variable">$msgForUser</span> <span class="token operator">=</span> <span class="token string">'系统内部错误'</span><span class="token punctuation">,</span> int <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msgForUser</span> <span class="token operator">=</span> <span class="token variable">$msgForUser</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">expectsJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'msg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msgForUser</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'pages.error'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'msg'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msgForUser</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个异常的构造函数中的第一个参数 <code>$message</code> 就是原本应该有的异常信息，比如连接数据库失败，第二个参数 <code>$msgForUser</code> 是展示给用户的信息，通常来说只需要告诉用户 <code>系统内部错误</code> 即可，因为不管是连接 Mysql 失败还是连接 Redis 失败对用户来说都是一样的，就是系统不可用，用户也不可能根据这个信息来解决什么问题。</p><h2 id="在代码中体现"><a href="#在代码中体现" class="headerlink" title="在代码中体现"></a>在代码中体现</h2><p><em>app/Http/Controllers/DemoController.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>InvalidRequestException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ProductsController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否有token值，如果没有则抛出异常。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidRequestException</span><span class="token punctuation">(</span><span class="token string">'无效的操作'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel错误提示替换为中文</title>
      <link href="/2020/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/"/>
      <url>/2020/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel表单验证提示替换为中文"><a href="#Laravel表单验证提示替换为中文" class="headerlink" title="Laravel表单验证提示替换为中文"></a>Laravel表单验证提示替换为中文</h1><h3 id="默认错误提示为中文"><a href="#默认错误提示为中文" class="headerlink" title="默认错误提示为中文"></a>默认错误提示为中文</h3><img src="/2020/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/image-20200516211457360.png" class title="默认错误提示"><h2 id="1-安装中文包"><a href="#1-安装中文包" class="headerlink" title="1.安装中文包"></a>1.安装中文包</h2><pre class=" language-bash"><code class="language-bash">composer require overtrue/laravel-lang</code></pre><p>安装成功后，在 <code>config/app.php</code> 文件中将 以下这一行：</p><pre class=" language-php"><code class="language-php">Illuminate\<span class="token package">Translation<span class="token punctuation">\</span>TranslationServiceProvider</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span></code></pre><p>替换为：</p><pre class=" language-php"><code class="language-php">Overtrue\<span class="token package">LaravelLang<span class="token punctuation">\</span>TranslationServiceProvider</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span></code></pre><p>最后，我们还需要修改系统语言，将原本的值 <code>en</code> 改成 <code>zh-CN</code>：</p><p><em>config/app.php</em></p><pre class=" language-php"><code class="language-php"><span class="token string">'locale'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span></code></pre><h3 id="此时"><a href="#此时" class="headerlink" title="此时"></a>此时</h3><img src="/2020/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/image-20200516212026660.png" class title="替换后的"><h2 id="2-在验证器中加入修改器"><a href="#2-在验证器中加入修改器" class="headerlink" title="2.在验证器中加入修改器"></a>2.在验证器中加入修改器</h2><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string">'province'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'省'</span><span class="token punctuation">,</span>            <span class="token string">'city'</span>          <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'城市'</span><span class="token punctuation">,</span>            <span class="token string">'district'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'地区'</span><span class="token punctuation">,</span>            <span class="token string">'address'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'详细地址'</span><span class="token punctuation">,</span>            <span class="token string">'zip'</span>           <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'邮编'</span><span class="token punctuation">,</span>            <span class="token string">'contact_name'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>            <span class="token string">'contact_phone'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'电话'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="再看效果"><a href="#再看效果" class="headerlink" title="再看效果"></a>再看效果</h3><img src="/2020/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/05/16/laravel-cuo-wu-ti-shi-ti-huan-wei-zhong-wen/image-20200516212625064.png" class title="修改后"><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装nginx+php+mysql环境</title>
      <link href="/2020/05/16/mac-an-zhuang-nginx-php-mysql-huan-jing/"/>
      <url>/2020/05/16/mac-an-zhuang-nginx-php-mysql-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac系统搭建nginx-php-mysql环境"><a href="#Mac系统搭建nginx-php-mysql环境" class="headerlink" title="Mac系统搭建nginx+php+mysql环境"></a>Mac系统搭建nginx+php+mysql环境</h1><h2 id="1-安装homestead"><a href="#1-安装homestead" class="headerlink" title="1.安装homestead"></a>1.安装homestead</h2><h3 id="打开终端运行命令："><a href="#打开终端运行命令：" class="headerlink" title="打开终端运行命令："></a>打开终端运行命令：</h3><pre class=" language-bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="token variable">)</span></span>"</span></code></pre><h3 id="输入以下命令查看homebrew是否安装成功"><a href="#输入以下命令查看homebrew是否安装成功" class="headerlink" title="输入以下命令查看homebrew是否安装成功"></a>输入以下命令查看homebrew是否安装成功</h3><pre class=" language-bash"><code class="language-bash">brew -v</code></pre><p>如果显示homebrew的版本则代表安装成功。</p><h2 id="2-替换homebrew的镜像源为清华源解决下载慢的问题"><a href="#2-替换homebrew的镜像源为清华源解决下载慢的问题" class="headerlink" title="2.替换homebrew的镜像源为清华源解决下载慢的问题"></a>2.替换homebrew的镜像源为清华源解决下载慢的问题</h2><h3 id="更换仓库源"><a href="#更换仓库源" class="headerlink" title="更换仓库源"></a>更换仓库源</h3><p>homebrew 默认的源是在 github 上面，每次更新速度都会非常慢。所以我们更换成国内的镜像源。就会快很多了。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/core<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/cask<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/cask-fonts<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git<span class="token function">git</span> -C <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo homebrew/cask-drivers<span class="token variable">)</span></span>"</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.gitbrew update</code></pre><h3 id="更换-Homebrew-bottles-镜像（影响软件下载速度）"><a href="#更换-Homebrew-bottles-镜像（影响软件下载速度）" class="headerlink" title="更换 Homebrew-bottles 镜像（影响软件下载速度）"></a>更换 Homebrew-bottles 镜像（影响软件下载速度）</h3><p>临时替换</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> HOMEBREW_BOTTLE_DOMAIN<span class="token operator">=</span>https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles</code></pre><p>永久替换</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token function">source</span> ~/.bash_profile</code></pre><h2 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nginx</code></pre><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><pre class=" language-bash"><code class="language-bash">brew services nginx</code></pre><h2 id="4-安装php7-3版本"><a href="#4-安装php7-3版本" class="headerlink" title="4.安装php7.3版本"></a>4.安装php7.3版本</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> php@7.3</code></pre><h3 id="启动php-fpm"><a href="#启动php-fpm" class="headerlink" title="启动php-fpm"></a>启动php-fpm</h3><pre class=" language-bash"><code class="language-bash">brew services start php@7.3</code></pre><h2 id="5-安装mysql"><a href="#5-安装mysql" class="headerlink" title="5.安装mysql"></a>5.安装mysql</h2><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> mysql</code></pre><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><pre class=" language-bash"><code class="language-bash">brew services start mysql</code></pre><h3 id="初始化mysql"><a href="#初始化mysql" class="headerlink" title="初始化mysql"></a>初始化mysql</h3><pre><code>mysql_secure_installation</code></pre><pre><code> ~  mysql_secure_installationSecuring the MySQL server deployment.Connecting to MySQL using a blank password.VALIDATE PASSWORD COMPONENT can be used to test passwordsand improve security. It checks the strength of passwordand allows the users to set only those passwords which aresecure enough. Would you like to setup VALIDATE PASSWORD component?Press y|Y for Yes, any other key for No: y //使用长密码还是段密码？y长密码 n短密码There are three levels of password validation policy:LOW    Length &gt;= 8 //长度大于等于8MEDIUM Length &gt;= 8, numeric, mixed case, and special charactersSTRONG Length &gt;= 8, numeric, mixed case, special characters and dictionary                  filePlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 0 //长度大于等于8Please set the password for root here.New password: //输入密码Re-enter new password: //确认密码Estimated strength of the password: 50Do you wish to continue with the password provided?(Press y|Y for Yes, any other key for No) : y //是否确认提供的密码By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them. This is intended only fortesting, and to make the installation go a bit smoother.You should remove them before moving into a productionenvironment.Remove anonymous users? (Press y|Y for Yes, any other key for No) : y //删除其他用户Success. Normally, root should only be allowed to connect from&#39;localhost&#39;. This ensures that someone cannot guess atthe root password from the network.Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n //屏蔽root用户远程登录 ... skipping.By default, MySQL comes with a database named &#39;test&#39; thatanyone can access. This is also intended only for testing,and should be removed before moving into a productionenvironment.Remove test database and access to it? (Press y|Y for Yes, any other key for No) : n //删除test数据库 ... skipping.Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y //重启数据库吗？Success.All done!</code></pre><h3 id="数据库安装完成"><a href="#数据库安装完成" class="headerlink" title="数据库安装完成"></a>数据库安装完成</h3><h3 id="此时环境基本搭建成功"><a href="#此时环境基本搭建成功" class="headerlink" title="此时环境基本搭建成功"></a>此时环境基本搭建成功</h3><h2 id="运行一个laravel框架测试环境"><a href="#运行一个laravel框架测试环境" class="headerlink" title="运行一个laravel框架测试环境"></a>运行一个laravel框架测试环境</h2><h3 id="准备一个laravel框架放在家目录下的Code文件夹内"><a href="#准备一个laravel框架放在家目录下的Code文件夹内" class="headerlink" title="准备一个laravel框架放在家目录下的Code文件夹内"></a>准备一个laravel框架放在家目录下的Code文件夹内</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/Code <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> ~/Code <span class="token operator">&amp;&amp;</span> composer create-project --perfer-dist laravel/laravel laravel-test</code></pre><h3 id="修改nginx配置文件"><a href="#修改nginx配置文件" class="headerlink" title="修改nginx配置文件"></a>修改nginx配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /usr/local/etc/nginx/nginx.conf</code></pre><p>把最后的 <code>include servers/*</code> 改为 <code>include vhosts/*.conf</code></p><h3 id="新建vhosts目录作为虚拟主机配置文件"><a href="#新建vhosts目录作为虚拟主机配置文件" class="headerlink" title="新建vhosts目录作为虚拟主机配置文件"></a>新建vhosts目录作为虚拟主机配置文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/etc/nginx/vhosts</code></pre><h3 id="创建文件并写入内容"><a href="#创建文件并写入内容" class="headerlink" title="创建文件并写入内容"></a>创建文件并写入内容</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> /usr/local/etc/nginx/vhosts/laravel.test.conf</code></pre><p>内容如下：</p><pre><code>server {  listen 80;  server_name laravel.test;  #access_log /usr/local/var/log/nginx/access.log combined;  index index.html index.htm index.php;  ## 下面的目录修改为你项目的实际目录  root /Users/lstink/Code/laravel-test/public;  ## laravel的重写规则  location / {      try_files $uri $uri/ /index.php?$query_string;  }  #error_page 404 /404.html;  #error_page 502 /502.html;  location ~ [^/]\.php(/|$) {    fastcgi_pass 127.0.0.1:9000;    #fastcgi_pass unix:/dev/shm/php-cgi.sock;    fastcgi_index index.php;    include fastcgi.conf;  }  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {    expires 30d;    access_log off;  }  location ~ .*\.(js|css)?$ {    expires 7d;    access_log off;  }  location ~ /\.ht {    deny all;  }}</code></pre><p>保存退出，测试配置文件没有问题的情况下，重启nginx</p><pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre><blockquote><p>如果报错502，那就是php-fpm没有开启，请运行 sudo php-fpm -D 启动php-fpm</p></blockquote><p>此时浏览器显示正常。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>nginx<ul><li>配置文件： <code>/usr/local/etc/nginx/nginx.conf</code></li><li>启动：<code>brew services start nginx</code></li><li>停止：<code>brew services stop nginx</code></li><li>重启：<code>brew services restart nginx</code></li></ul></li><li>php-fpm<ul><li>配置文件：<code>/usr/local/etc/php/</code></li><li>启动：<code>sudo php-fpm -D</code></li><li>停止：<code>sudo kill -INT cat /usr/local/var/run/php-fpm.pid</code></li><li>重启：<code>sudo kill -USR2 cat /usr/local/var/run/php-fpm.pid</code></li></ul></li><li>mysql<ul><li>配置文件：<code>/usr/local/etc/my.cnf</code></li><li>启动：<code>brew services start mysql</code></li><li>停止：<code>brew services stop mysql</code></li><li>重启：<code>brew services restart mysql</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel框架的部署</title>
      <link href="/2020/05/13/laravel-kuang-jia-de-bu-shu/"/>
      <url>/2020/05/13/laravel-kuang-jia-de-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-框架的部署"><a href="#Laravel-框架的部署" class="headerlink" title="Laravel 框架的部署"></a>Laravel 框架的部署</h1><h2 id="下载laravel框架到相应的目录"><a href="#下载laravel框架到相应的目录" class="headerlink" title="下载laravel框架到相应的目录"></a>下载laravel框架到相应的目录</h2><h3 id="通过composer下载"><a href="#通过composer下载" class="headerlink" title="通过composer下载"></a>通过composer下载</h3><pre class=" language-bash"><code class="language-bash">composer create-project --prefer-dist laravel/laravel blog</code></pre><p>默认下载的是最新版本的laravel框架，下载指定版本的laravel框架为：</p><pre><code>composer create-project --prefer-dist laravel/laravel=&quot;5.2.*&quot; blog</code></pre><blockquote><p>最后面的 blog 是你要自定义的项目名称，你写什么最终下载下来的目录名称就是什么</p></blockquote><h3 id="通过git下载"><a href="#通过git下载" class="headerlink" title="通过git下载"></a>通过git下载</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Lstink/laravel_api.git</code></pre><blockquote><p><code>git clone</code> 后面写你自己的项目地址</p></blockquote><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>进入项目根目录 <code>cd blog</code></p><p>通过comoser安装依赖包，一般通过git克隆的项目都需要安装依赖包，因为 .gitignore文件中忽略了vendor目录的上传。</p><pre class=" language-bash"><code class="language-bash">composer <span class="token function">install</span></code></pre><h2 id="生成-env文件"><a href="#生成-env文件" class="headerlink" title="生成.env文件"></a>生成.env文件</h2><p>拷贝 .env 的示例文件，并重命名为 .env 文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> .env.example .env</code></pre><h3 id="生成-env文件中的密钥"><a href="#生成-env文件中的密钥" class="headerlink" title="生成.env文件中的密钥"></a>生成.env文件中的密钥</h3><p>利用artisan生成.env文件中的密钥</p><pre class=" language-php"><code class="language-php">php artisan key<span class="token punctuation">:</span>generate</code></pre><h3 id="修改-env文件中的配置为你自己的"><a href="#修改-env文件中的配置为你自己的" class="headerlink" title="修改.env文件中的配置为你自己的"></a>修改.env文件中的配置为你自己的</h3><h2 id="部署laravel项目到本地或者服务器"><a href="#部署laravel项目到本地或者服务器" class="headerlink" title="部署laravel项目到本地或者服务器"></a>部署laravel项目到本地或者服务器</h2><p>如果用Apache，直接路径指向项目的public目录即可</p><p>如果用nginx，则还需要添加laravel的重写规则</p><p>在nginx的配置文件中加入:</p><pre><code> location / {     try_files $uri $uri/ /index.php?$query_string; }</code></pre><p>这样才能正常访问你的项目。</p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微擎框架迁移</title>
      <link href="/2020/05/12/wei-qing-kuang-jia-qian-yi/"/>
      <url>/2020/05/12/wei-qing-kuang-jia-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="微擎框架的迁移部署"><a href="#微擎框架的迁移部署" class="headerlink" title="微擎框架的迁移部署"></a>微擎框架的迁移部署</h1><h2 id="把微擎整个框架打包，数据库打包"><a href="#把微擎整个框架打包，数据库打包" class="headerlink" title="把微擎整个框架打包，数据库打包"></a>把微擎整个框架打包，数据库打包</h2><p>这个步骤可以通过linux的<code>tar</code>命令和mysql的<code>sqldump</code>命令完成，具体不再介绍</p><h2 id="重新部署框架"><a href="#重新部署框架" class="headerlink" title="重新部署框架"></a>重新部署框架</h2><ol><li><p>把框架部署到本地或者服务器，配置域名访问到框架的根目录（我配置的本地域名为：<a href="http://www.weiqing.com" target="_blank" rel="noopener">www.weiqing.com</a></p><p>此时访问域名不会显示任何有关于微擎框架的内容</p><img src="/2020/05/12/wei-qing-kuang-jia-qian-yi/05/12/wei-qing-kuang-jia-qian-yi/image-20200512180440073.png" class title="微擎部署"></li><li><p>访问web的入口路由<code>web/index.php</code>,比如我的<code>www.weiqing.com/web/index.php</code></p><p><strong>不显示任何东西，这是因为你没有导入数据库的原因！！</strong></p></li></ol><h3 id="导入数据库数据"><a href="#导入数据库数据" class="headerlink" title="导入数据库数据"></a>导入数据库数据</h3><ol><li><p>打开navicat,新建数据库，名称随意，我写的是weiqing,字符选择<code>utf8</code>,字符集选择<code>utf8_general_ci</code></p><img src="/2020/05/12/wei-qing-kuang-jia-qian-yi/05/12/wei-qing-kuang-jia-qian-yi/image-20200512181248445.png" class title="新建数据库"><ol><li><p>打开数据库，右键选择 <code>运行SQL文件</code></p><img src="/2020/05/12/wei-qing-kuang-jia-qian-yi/05/12/wei-qing-kuang-jia-qian-yi/image-20200512181452485.png" class title="运行SQL文件"></li><li><p>选择sql文件导入数据库。这时候数据库文件就导入完成了。</p></li></ol><h3 id="修改框架的配置文件"><a href="#修改框架的配置文件" class="headerlink" title="修改框架的配置文件"></a>修改框架的配置文件</h3><p>这里主要是修改数据库的配置信息。</p><p>打开配置文件<code>/data/config.php</code></p><img src="/2020/05/12/wei-qing-kuang-jia-qian-yi/05/12/wei-qing-kuang-jia-qian-yi/image-20200512181937844.png" class title="修改配置文件"><p>这时候基本上信息都配置完成，可以访问你的框架了！</p><blockquote><p>主要是修改图中标记的地方，修改为你实际的数据库配置信息。</p></blockquote><h2 id="打开浏览器输入地址访问后台吧！"><a href="#打开浏览器输入地址访问后台吧！" class="headerlink" title="打开浏览器输入地址访问后台吧！"></a>打开浏览器输入地址访问后台吧！</h2><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><table><thead><tr><th>路由</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td><code>/web/index.php</code></td><td>web端入口文件</td><td><code>www.weiqing.com/web/index.php</code></td></tr><tr><td><code>/app/index.php</code></td><td>app端入口文件</td><td><code>www.weiqing.com/app/index.php</code></td></tr><tr><td><code>/api.php</code></td><td>api入口文件</td><td><code>www.weiqing.com/api.php</code></td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> 微擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 微擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔面板安装微擎</title>
      <link href="/2020/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/"/>
      <url>/2020/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/</url>
      
        <content type="html"><![CDATA[<h1 id="宝塔面板安装微擎"><a href="#宝塔面板安装微擎" class="headerlink" title="宝塔面板安装微擎"></a>宝塔面板安装微擎</h1><h2 id="安装宝塔7-2"><a href="#安装宝塔7-2" class="headerlink" title="安装宝塔7.2"></a>安装宝塔7.2</h2><p>Centos安装命令：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> sh install.sh</code></pre><p>Ubuntu/Deepin安装命令：</p><pre><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code></pre><p>安装完成之后根据提示登录宝塔后台</p><blockquote><p>请自行选择一键安装LNMP环境，建议勾选编译安装</p></blockquote><h2 id="一键部署微擎"><a href="#一键部署微擎" class="headerlink" title="一键部署微擎"></a>一键部署微擎</h2><p>点击软件商店 –&gt; 一键部署</p><img src="/2020/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/image-20200512090325064.png" class title="安装微擎"><h2 id="填写你要部署的信息，然后根据提示进入安装页面"><a href="#填写你要部署的信息，然后根据提示进入安装页面" class="headerlink" title="填写你要部署的信息，然后根据提示进入安装页面"></a>填写你要部署的信息，然后根据提示进入安装页面</h2><p>你写的域名+install.php,例如 <code>weiqing.abc.com/install.php</code></p><img src="/2020/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/05/12/bao-ta-mian-ban-an-zhuang-wei-qing/image-20200512090540101.png" class title="填写参数"><p>设置好参数之后会自动安装，然后根据提示进入后台就行了</p>]]></content>
      
      
      <categories>
          
          <category> 宝塔 </category>
          
          <category> 微擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔 微擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中安装宝塔面板</title>
      <link href="/2020/05/12/zai-docker-zhong-an-zhuang-bao-ta-mian-ban/"/>
      <url>/2020/05/12/zai-docker-zhong-an-zhuang-bao-ta-mian-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="在docker中安装宝塔面板"><a href="#在docker中安装宝塔面板" class="headerlink" title="在docker中安装宝塔面板"></a>在docker中安装宝塔面板</h1><h2 id="下载一个centos镜像"><a href="#下载一个centos镜像" class="headerlink" title="下载一个centos镜像"></a>下载一个centos镜像</h2><pre class=" language-bash"><code class="language-bash">docker pull centos</code></pre><h2 id="创建docker容器"><a href="#创建docker容器" class="headerlink" title="创建docker容器"></a>创建docker容器</h2><pre class=" language-bash"><code class="language-bash">docker run -i -t -d --name baota -p 20:20 -p 21:21 -p 80:80 -p 443:443 -p 888:888 -p 8888:8888 --privileged<span class="token operator">=</span>true -v /home/www:/www centos</code></pre><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>上面命令的意思是创建一个docker容易命名为baota(名称大家自定义)让他后台运行，然后将宿主机的20，21，80，443，888，8888这五个端口映射到docker容器中去。<br>并且将宿主机的/home/www文件夹映射到docker容器的/www上去(注意：文件目录如果不存在。宿主机和容器会自己创建，无需手动创建)。privileged表示在运行容器的时候，给容器加特权，设置容器有写文件的权限。</p></blockquote><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it baota /bin/bash</code></pre><h2 id="由于docker中是一个纯净版本，我们首先需要给他升级并且安装必要的软件。"><a href="#由于docker中是一个纯净版本，我们首先需要给他升级并且安装必要的软件。" class="headerlink" title="由于docker中是一个纯净版本，我们首先需要给他升级并且安装必要的软件。"></a>由于docker中是一个纯净版本，我们首先需要给他升级并且安装必要的软件。</h2><pre class=" language-bash"><code class="language-bash">yum check-update -y <span class="token operator">&amp;&amp;</span> yum update -y <span class="token operator">&amp;&amp;</span> yum <span class="token function">install</span> initscripts <span class="token function">screen</span> <span class="token function">wget</span> -y</code></pre><h2 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h2><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> -O install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> sh install.sh</code></pre><h2 id="安装完成即可根据提示在浏览器登录宝塔后台"><a href="#安装完成即可根据提示在浏览器登录宝塔后台" class="headerlink" title="安装完成即可根据提示在浏览器登录宝塔后台"></a>安装完成即可根据提示在浏览器登录宝塔后台</h2><img src="/2020/05/12/zai-docker-zhong-an-zhuang-bao-ta-mian-ban/05/12/zai-docker-zhong-an-zhuang-bao-ta-mian-ban/image-20200512084822521.png" class title="宝塔面板"><h3 id="此时宝塔面板安装成功"><a href="#此时宝塔面板安装成功" class="headerlink" title="此时宝塔面板安装成功"></a>此时宝塔面板安装成功</h3>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不登陆服务器运行命令的方法</title>
      <link href="/2020/05/11/bu-deng-lu-fu-wu-qi-yun-xing-ming-ling-de-fang-fa/"/>
      <url>/2020/05/11/bu-deng-lu-fu-wu-qi-yun-xing-ming-ling-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="不登陆服务器执行命令的方法，可用于shell脚本的书写"><a href="#不登陆服务器执行命令的方法，可用于shell脚本的书写" class="headerlink" title="不登陆服务器执行命令的方法，可用于shell脚本的书写"></a>不登陆服务器执行命令的方法，可用于shell脚本的书写</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> root@123.256.256.235 <span class="token string">"ls &amp;&amp; ls"</span></code></pre><p>引号内为想要执行的命令</p><p>建议使用以下命令将本机密钥复制到服务器，免除密码登录的过程</p><pre class=" language-bash"><code class="language-bash">ssh-copy-id root@123.123.123.123</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel的数据迁移</title>
      <link href="/2020/05/07/laravel-de-shu-ju-qian-yi/"/>
      <url>/2020/05/07/laravel-de-shu-ju-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel数据迁移"><a href="#Laravel数据迁移" class="headerlink" title="Laravel数据迁移"></a>Laravel数据迁移</h1><p>本文简单介绍一下laravel框架的数据迁移(database migrations)功能。</p><h2 id="为什么要使用数据迁移？"><a href="#为什么要使用数据迁移？" class="headerlink" title="为什么要使用数据迁移？"></a>为什么要使用数据迁移？</h2><p>在团队开发中，经常会几个人使用一个框架，并且共同推送代码到版本仓库。但是代码的同步简单，数据库结构的同步就会出现问题。比如你的同事修改了某些表的某个字段并修改了代码， 你可以通过 git即时的同步同事修改的代码，但是数据库结构，你只能通过手工的方式来复制同事修改的 SQL 语句，执行以保证数据库的结构一致。那么，Laravel 中的数据库迁移概念，就是用于解决团队中保证数据库结构一致的方案。</p><h2 id="执行数据迁移"><a href="#执行数据迁移" class="headerlink" title="执行数据迁移"></a>执行数据迁移</h2><p><code>php artisan migrate</code></p><p>执行结果如下图，提示迁移成功的表和所用时间</p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200508013229687.png" class title="数据迁移"><h2 id="创建迁移表"><a href="#创建迁移表" class="headerlink" title="创建迁移表"></a>创建迁移表</h2><p><code>php artisan make:migration create_article_table --create=&#39;articles&#39;</code></p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507231636598.png" class title="新建迁移表"><p>这时候datebase/migrations目录下会新增迁移文件</p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507231938425.png" class title="迁移文件"><p>在迁移文件中，up 方法用于创建数据表，down方法用于回滚，也就是删除数据表。</p><h2 id="修改迁移文件为自己需要的内容"><a href="#修改迁移文件为自己需要的内容" class="headerlink" title="修改迁移文件为自己需要的内容"></a>修改迁移文件为自己需要的内容</h2><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507233106717.png" class title="修改迁移文件"><h2 id="执行迁移文件"><a href="#执行迁移文件" class="headerlink" title="执行迁移文件"></a>执行迁移文件</h2><p><code>php artisan migrate</code></p><p>这样数据库就会新增一个数据表</p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507233555163.png" class title="数据表"><h2 id="假设需要修改数据表字段"><a href="#假设需要修改数据表字段" class="headerlink" title="假设需要修改数据表字段"></a>假设需要修改数据表字段</h2><p><strong>新增一个字段：</strong></p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507233835777.png" class title="修改数据表"><p>这时候直接执行迁移命令是没有作用的</p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507235215690.png" class title="直接执行迁移命令"><p>必须回滚迁移然后再重新执行迁移</p><p><code>php artisan migrate:rollback</code></p><p><code>php artisan migrate</code></p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507235107911.png" class title="修改字段"><h2 id="扩展命令"><a href="#扩展命令" class="headerlink" title="扩展命令"></a>扩展命令</h2><ul><li><p>回滚所有迁移，重建数据库</p><p><code>php artisan migrate:reset</code></p><p>这样数据库的所有表都被回滚了，只剩下迁移记录表</p><img src="/2020/05/07/laravel-de-shu-ju-qian-yi/05/07/laravel-de-shu-ju-qian-yi/image-20200507235614509.png" class title="重建数据库"></li><li><p>删除所有表，并且重建迁移</p><pre class=" language-php"><code class="language-php">php artisan migrate<span class="token punctuation">:</span>fresh</code></pre></li><li><p>回滚所有迁移，并且重建迁移</p><pre class=" language-php"><code class="language-php">php artisan migrate<span class="token punctuation">:</span>refresh</code></pre></li><li><p>创建迁移仓库</p><pre class=" language-php"><code class="language-php">php artisan migrate<span class="token punctuation">:</span>install</code></pre></li><li><p>显示所有的迁移状态</p><pre class=" language-php"><code class="language-php">php artisan migrate<span class="token punctuation">:</span>status</code></pre></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>可用的clumn类型</strong></p><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>$table-&gt;bigIncrements(&#39;id&#39;)</code></td><td align="left">自增ID，类型为bigint</td></tr><tr><td align="left"><code>$table-&gt;bigInteger(&#39;votes&#39;)</code></td><td align="left">等同于数据库中的BIGINT类型</td></tr><tr><td align="left"><code>$table-&gt;binary(&#39;data&#39;)</code></td><td align="left">等同于数据库中的BLOB类型</td></tr><tr><td align="left"><code>$table-&gt;boolean(&#39;confirmed&#39;)</code></td><td align="left">等同于数据库中的BOOLEAN类型</td></tr><tr><td align="left"><code>$table-&gt;char(&#39;name&#39;, 4)</code></td><td align="left">等同于数据库中的CHAR类型</td></tr><tr><td align="left"><code>$table-&gt;date(&#39;created_at&#39;)</code></td><td align="left">等同于数据库中的DATE类型</td></tr><tr><td align="left"><code>$table-&gt;dateTime(&#39;created_at&#39;)</code></td><td align="left">等同于数据库中的DATETIME类型</td></tr><tr><td align="left"><code>$table-&gt;decimal(&#39;amount&#39;, 5, 2)</code></td><td align="left">等同于数据库中的DECIMAL类型，带一个精度和范围</td></tr><tr><td align="left"><code>$table-&gt;double(&#39;column&#39;, 15, 8)</code></td><td align="left">等同于数据库中的DOUBLE类型，带精度, 总共15位数字，小数点后8位.</td></tr><tr><td align="left"><code>$table-&gt;enum(&#39;choices&#39;, [&#39;foo&#39;, &#39;bar&#39;])</code></td><td align="left">等同于数据库中的 ENUM类型</td></tr><tr><td align="left"><code>$table-&gt;float(&#39;amount&#39;)</code></td><td align="left">等同于数据库中的 FLOAT 类型</td></tr><tr><td align="left"><code>$table-&gt;increments(&#39;id&#39;)</code></td><td align="left">数据库主键自增ID</td></tr><tr><td align="left"><code>$table-&gt;integer(&#39;votes&#39;)</code></td><td align="left">等同于数据库中的 INTEGER 类型</td></tr><tr><td align="left"><code>$table-&gt;json(&#39;options&#39;)</code></td><td align="left">等同于数据库中的 JSON 类型</td></tr><tr><td align="left"><code>$table-&gt;jsonb(&#39;options&#39;)</code></td><td align="left">等同于数据库中的 JSONB 类型</td></tr><tr><td align="left"><code>$table-&gt;longText(&#39;description&#39;)</code></td><td align="left">等同于数据库中的 LONGTEXT 类型</td></tr><tr><td align="left"><code>$table-&gt;mediumInteger(&#39;numbers&#39;)</code></td><td align="left">等同于数据库中的 MEDIUMINT类型</td></tr><tr><td align="left"><code>$table-&gt;mediumText(&#39;description&#39;)</code></td><td align="left">等同于数据库中的 MEDIUMTEXT类型</td></tr><tr><td align="left"><code>$table-&gt;morphs(&#39;taggable&#39;)</code></td><td align="left">添加一个 INTEGER类型的 taggable_id 列和一个 STRING类型的 taggable_type列</td></tr><tr><td align="left"><code>$table-&gt;nullableTimestamps()</code></td><td align="left">和 timestamps()一样但不允许 NULL值.</td></tr><tr><td align="left"><code>$table-&gt;rememberToken()</code></td><td align="left">添加一个 remember_token 列： VARCHAR(100) NULL.</td></tr><tr><td align="left"><code>$table-&gt;smallInteger(&#39;votes&#39;)</code></td><td align="left">等同于数据库中的 SMALLINT 类型</td></tr><tr><td align="left"><code>$table-&gt;softDeletes()</code></td><td align="left">新增一个 deleted_at 列 用于软删除.</td></tr><tr><td align="left"><code>$table-&gt;string(&#39;email&#39;)</code></td><td align="left">等同于数据库中的 VARCHAR 列  .</td></tr><tr><td align="left"><code>$table-&gt;string(&#39;name&#39;, 100)</code></td><td align="left">等同于数据库中的 VARCHAR，带一个长度</td></tr><tr><td align="left"><code>$table-&gt;text(&#39;description&#39;)</code></td><td align="left">等同于数据库中的 TEXT 类型</td></tr><tr><td align="left"><code>$table-&gt;time(&#39;sunrise&#39;)</code></td><td align="left">等同于数据库中的 TIME类型</td></tr><tr><td align="left"><code>$table-&gt;tinyInteger(&#39;numbers&#39;)</code></td><td align="left">等同于数据库中的 TINYINT 类型</td></tr><tr><td align="left"><code>$table-&gt;timestamp(&#39;added_on&#39;)</code></td><td align="left">等同于数据库中的 TIMESTAMP 类型</td></tr><tr><td align="left"><code>$table-&gt;timestamps()</code></td><td align="left">添加添加 created_at 和 updated_at列.</td></tr></tbody></table><p><strong>附加属性</strong></p><table><thead><tr><th>附加</th><th>描述</th></tr></thead><tbody><tr><td><code>-&gt;first()</code></td><td>将该列置为表中第一个列 (仅适用于MySQL)</td></tr><tr><td><code>-&gt;after(&#39;column&#39;)</code></td><td>将该列置于另一个列之后 (仅适用于MySQL)</td></tr><tr><td><code>-&gt;nullable()</code></td><td>允许该列的值为NULL</td></tr><tr><td><code>-&gt;default($value)</code></td><td>指定列的默认值</td></tr><tr><td><code>-&gt;unsigned()</code></td><td>设置 integer 列为 UNSIGNED</td></tr></tbody></table><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器3刷华硕固件</title>
      <link href="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/"/>
      <url>/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="小米路由器3-R3-刷华硕固件"><a href="#小米路由器3-R3-刷华硕固件" class="headerlink" title="小米路由器3(R3)刷华硕固件"></a>小米路由器3(R3)刷华硕固件</h1><p>首先上图，这是我刷好之后的</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-180641-8759791.png" class title="潘多拉固件"><h2 id="说一下为什么要刷这个固件"><a href="#说一下为什么要刷这个固件" class="headerlink" title="说一下为什么要刷这个固件"></a>说一下为什么要刷这个固件</h2><p>是因为听说这个固件比原版固件更稳定，信号更好，并且功能更强大，当然操作也就更复杂。更因为个人需要其中的一个强大的功能。</p><h2 id="需要的工具"><a href="#需要的工具" class="headerlink" title="需要的工具"></a>需要的工具</h2><ol><li>VM虚拟机</li><li>系统镜像</li><li>路由器降级固件</li><li>潘多拉固件</li></ol><h3 id="这里百度云打包下载全部所需文件"><a href="#这里百度云打包下载全部所需文件" class="headerlink" title="这里百度云打包下载全部所需文件"></a>这里百度云打包下载全部所需文件</h3><p>链接:<a href="https://pan.baidu.com/s/1BjvcD3XyZIc-IV-AAZ8RJg" target="_blank" rel="noopener">https://pan.baidu.com/s/1BjvcD3XyZIc-IV-AAZ8RJg</a>  密码:c4yl</p><h2 id="开始安装操作"><a href="#开始安装操作" class="headerlink" title="开始安装操作"></a>开始安装操作</h2><ol><li><p>将路由器的固件降级，进入路由器后台管理系统，点击手动安装固件，选择百度云下载的降级固件，点击升级，并且选择清除数据</p></li><li><p>开启ssh操作权限</p><p>这里有两种方法</p><ul><li>官方开启ssh的方法，具体参考官方说明 <a href="http://www1.miwifi.com/miwifi_open.html" target="_blank" rel="noopener">http://www1.miwifi.com/miwifi_open.html</a></li><li>通过漏洞开启ssh的方法，在虚拟机中操作</li></ul></li><li><p>安装虚拟机，在windows系统下安装vm虚拟机，破解方法文件中都有，请自行参考</p></li><li><p>用虚拟机打开镜像，然后开启</p><ul><li><p>选择 0 (这是开启ssh的步骤)</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-183617.png" class title="程序选择"></li><li><p>然后此时会让你填写路由器的ip地址，如果你没有修改的话，那么默认就是192.168.31.1，直接回车即可</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-183850.png" class title="路由器地址"></li><li><p>这时候会让你输入路由器的后台管理密码</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-184042.png" class title="路由器后台密码"></li><li><p>等待一段时间后，出现以下界面就是开启ssh成功了</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-184214.png" class title="成功开启ssh"></li></ul></li><li><p>刷入华硕固件</p><ul><li><p>任意键回到主菜单之后，选择 4</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-184416.png" class title="WX20200506-184416"></li><li><p>再继续选择 4</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-184451.png" class title="刷固件"></li><li><p>这时候会提示你是否备份，如果你需要备份就输入 y ，然后会开始备份，这个过程时间稍长，如果你不需要备份就选择 n，我选择的是n，然后就会刷入华硕固件，出现重启的提示就代表刷入成功，输入 y ，回车，重启路由器</p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-184838.png" class title="固件刷入成功"></li><li><p>此时华硕固件刷入成功！</p></li></ul></li></ol><h2 id="接下来刷入潘多拉固件"><a href="#接下来刷入潘多拉固件" class="headerlink" title="接下来刷入潘多拉固件"></a>接下来刷入潘多拉固件</h2><p>重启路由器后，浏览器输入<code>192.168.1.1</code>进入现在的后台，账号密码都是 <code>admin</code></p><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-185152.png" class title="升级固件"><p>选择完MI-3固件后，点击 <code>upload</code></p><h3 id="重启后界面会变成中文，这是新固件的内容还没有设置完成，这里重置两次就好了，会有两个重置，顺序已标出"><a href="#重启后界面会变成中文，这是新固件的内容还没有设置完成，这里重置两次就好了，会有两个重置，顺序已标出" class="headerlink" title="重启后界面会变成中文，这是新固件的内容还没有设置完成，这里重置两次就好了，会有两个重置，顺序已标出"></a>重启后界面会变成中文，这是新固件的内容还没有设置完成，这里重置两次就好了，会有两个重置，顺序已标出</h3><img src="/2020/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/05/06/xiao-mi-lu-you-qi-3-shua-hua-shuo-gu-jian/WX20200506-185522.png" class title="重置后台系统"><blockquote><p><strong>提示：</strong></p><p><strong>重置后进入后台的地址会变成192.168.123.1，而无线名称会变成PDCN</strong></p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>配置你的路由器，刷机完成！</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
